/// Vulkan functions
module dvulkan.functions; 
//THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY.
//Note: It's been edited. -> Search for "het"

import dvulkan.types; 
import std.typetuple; 
import std.traits; 
import std.algorithm : startsWith; 
version(DVulkanAllExtensions)
{
	version = DVulkan_VK_VERSION_1_0; 
	version = DVulkan_VK_KHR_surface; 
	version = DVulkan_VK_KHR_win32_surface; //het
	version = DVulkan_VK_KHR_swapchain; 
	version = DVulkan_VK_KHR_display; 
	version = DVulkan_VK_KHR_display_swapchain; 
	version = DVulkan_VK_KHR_sampler_mirror_clamp_to_edge; 
	version = DVulkan_VK_ANDROID_native_buffer; 
	version = DVulkan_VK_EXT_debug_report; 
	version = DVulkan_VK_NV_glsl_shader; 
	version = DVulkan_VK_NV_extension_1; 
	version = DVulkan_VK_IMG_filter_cubic; 
	version = DVulkan_VK_AMD_extension_1; 
	version = DVulkan_VK_AMD_extension_2; 
	version = DVulkan_VK_AMD_rasterization_order; 
	version = DVulkan_VK_AMD_extension_4; 
	version = DVulkan_VK_AMD_extension_5; 
	version = DVulkan_VK_AMD_extension_6; 
	version = DVulkan_VK_EXT_debug_marker; 
}

extern(System) @nogc nothrow
{
	
	/// Struct containing function pointers to all Vulkan functions.
	struct VulkanFunctions
	{
		/// The instance that the functions were loaded from, if applicable.
		VkInstance instance; 
		/// The device that the functions were loaded from, if applicable.
		VkDevice device; 
		
		/// Loads the following functions, by calling the passed in vkGetInstanceProcAddr function:
		/// vkGetInstanceProcAddr (copies the one passed in),
		/// vkEnumerateInstanceExtensionProperties,
		/// vkEnumerateInstanceLayerProperties, and
		/// vkCreateInstance
		void loadInitializationFunctions(PFN_vkGetInstanceProcAddr getProcAddr)
		{
			vkGetInstanceProcAddr = getProcAddr; 
			vkEnumerateInstanceExtensionProperties = cast(PFN_vkEnumerateInstanceExtensionProperties) vkGetInstanceProcAddr(null, "vkEnumerateInstanceExtensionProperties"); 
			vkEnumerateInstanceLayerProperties = cast(PFN_vkEnumerateInstanceLayerProperties) vkGetInstanceProcAddr(null, "vkEnumerateInstanceLayerProperties"); 
			vkCreateInstance = cast(PFN_vkCreateInstance) vkGetInstanceProcAddr(null, "vkCreateInstance"); 
		} 
		
		/// Loads all functions from an instance (except functions loaded by loadInitializationFunctions).
		/// The functions may be used with any device created from this instance (but will have a slight dispatching overhead).
		/// Sets `instance` to the passed in instance.
		void loadInstanceFunctions(VkInstance instance)
		{
			assert(this.vkGetInstanceProcAddr, "loadInstanceFunctions called without vkGetInstanceProcAddr set"); 
			
			enum shouldLoad(string name) =
				 name.startsWith("vk") &&
				 staticIndexOf!(
				name,
								"vkGetInstanceProcAddr",
								"vkEnumerateInstanceExtensionProperties",
								"vkEnumerateInstanceLayerProperties",
								"vkCreateInstance",
			) == -1; 
			alias funcsToLoad = Filter!(shouldLoad, AllFuncs); 
			
			this.instance = instance; 
			foreach(string name; funcsToLoad)
			{
				__traits(getMember, this, name) = cast(typeof(__traits(getMember, VulkanFunctions, name)))
					vkGetInstanceProcAddr(instance, name); 
			}
		} 
		
		/// Loads functions specific for a device.
		/// This loads all Vulkan functions that take a VkDevice, VkQueue, or VkCommandBuffer as their first argument.
		/// The functions may only be used with the passed-in device, and should be free of dispatching overhead.
		/// Sets `device` to the passed-in device.
		void loadDeviceFunctions(VkDevice device)
		{
			assert(this.vkGetDeviceProcAddr, "loadInstanceFunctions called without vkGetDeviceProcAddr set"); 
			
			enum shouldLoad(string name) =
				 Parameters!(__traits(getMember, VulkanFunctions, "PFN_"~name)).length > 0 &&
				 staticIndexOf!(Parameters!(__traits(getMember, VulkanFunctions, "PFN_"~name))[0], VkDevice, VkQueue, VkCommandBuffer) != -1; 
			alias funcsToLoad = Filter!(shouldLoad, AllFuncs); 
			
			this.device = device; 
			foreach(string name; funcsToLoad)
			{
				__traits(getMember, this, name) = cast(typeof(__traits(getMember, VulkanFunctions, name)))
					vkGetDeviceProcAddr(device, name); 
			}
		} 
		
		private enum IsVKFunc(string name) = name.startsWith("vk"); 
		package alias AllFuncs = Filter!(IsVKFunc, __traits(allMembers, VulkanFunctions)); 
		
		version(DVulkan_VK_VERSION_1_0)
		{
			alias PFN_vkCreateInstance = VkResult function(const(VkInstanceCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkInstance* pInstance); 
			PFN_vkCreateInstance vkCreateInstance; 
			alias PFN_vkDestroyInstance = void function(VkInstance instance,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyInstance vkDestroyInstance; 
			alias PFN_vkEnumeratePhysicalDevices = VkResult function(VkInstance instance,uint32_t* pPhysicalDeviceCount,VkPhysicalDevice* pPhysicalDevices); 
			PFN_vkEnumeratePhysicalDevices vkEnumeratePhysicalDevices; 
			alias PFN_vkGetPhysicalDeviceFeatures = void function(VkPhysicalDevice physicalDevice,VkPhysicalDeviceFeatures* pFeatures); 
			PFN_vkGetPhysicalDeviceFeatures vkGetPhysicalDeviceFeatures; 
			alias PFN_vkGetPhysicalDeviceFormatProperties = void function(VkPhysicalDevice physicalDevice,VkFormat format,VkFormatProperties* pFormatProperties); 
			PFN_vkGetPhysicalDeviceFormatProperties vkGetPhysicalDeviceFormatProperties; 
			alias PFN_vkGetPhysicalDeviceImageFormatProperties = VkResult function(VkPhysicalDevice physicalDevice,VkFormat format,VkImageType type,VkImageTiling tiling,VkImageUsageFlags usage,VkImageCreateFlags flags,VkImageFormatProperties* pImageFormatProperties); 
			PFN_vkGetPhysicalDeviceImageFormatProperties vkGetPhysicalDeviceImageFormatProperties; 
			alias PFN_vkGetPhysicalDeviceProperties = void function(VkPhysicalDevice physicalDevice,VkPhysicalDeviceProperties* pProperties); 
			PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties; 
			alias PFN_vkGetPhysicalDeviceQueueFamilyProperties = void function(VkPhysicalDevice physicalDevice,uint32_t* pQueueFamilyPropertyCount,VkQueueFamilyProperties* pQueueFamilyProperties); 
			PFN_vkGetPhysicalDeviceQueueFamilyProperties vkGetPhysicalDeviceQueueFamilyProperties; 
			alias PFN_vkGetPhysicalDeviceMemoryProperties = void function(VkPhysicalDevice physicalDevice,VkPhysicalDeviceMemoryProperties* pMemoryProperties); 
			PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties; 
			alias PFN_vkGetInstanceProcAddr = PFN_vkVoidFunction function(VkInstance instance,const(char)* pName); 
			PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr; 
			alias PFN_vkGetDeviceProcAddr = PFN_vkVoidFunction function(VkDevice device,const(char)* pName); 
			PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr; 
			alias PFN_vkCreateDevice = VkResult function(VkPhysicalDevice physicalDevice,const(VkDeviceCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkDevice* pDevice); 
			PFN_vkCreateDevice vkCreateDevice; 
			alias PFN_vkDestroyDevice = void function(VkDevice device,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyDevice vkDestroyDevice; 
			alias PFN_vkEnumerateInstanceExtensionProperties = VkResult function(const(char)* pLayerName,uint32_t* pPropertyCount,VkExtensionProperties* pProperties); 
			PFN_vkEnumerateInstanceExtensionProperties vkEnumerateInstanceExtensionProperties; 
			alias PFN_vkEnumerateDeviceExtensionProperties = VkResult function(VkPhysicalDevice physicalDevice,const(char)* pLayerName,uint32_t* pPropertyCount,VkExtensionProperties* pProperties); 
			PFN_vkEnumerateDeviceExtensionProperties vkEnumerateDeviceExtensionProperties; 
			alias PFN_vkEnumerateInstanceLayerProperties = VkResult function(uint32_t* pPropertyCount,VkLayerProperties* pProperties); 
			PFN_vkEnumerateInstanceLayerProperties vkEnumerateInstanceLayerProperties; 
			alias PFN_vkEnumerateDeviceLayerProperties = VkResult function(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkLayerProperties* pProperties); 
			PFN_vkEnumerateDeviceLayerProperties vkEnumerateDeviceLayerProperties; 
			alias PFN_vkGetDeviceQueue = void function(VkDevice device,uint32_t queueFamilyIndex,uint32_t queueIndex,VkQueue* pQueue); 
			PFN_vkGetDeviceQueue vkGetDeviceQueue; 
			alias PFN_vkQueueSubmit = VkResult function(VkQueue queue,uint32_t submitCount,const(VkSubmitInfo)* pSubmits,VkFence fence); 
			PFN_vkQueueSubmit vkQueueSubmit; 
			alias PFN_vkQueueWaitIdle = VkResult function(VkQueue queue); 
			PFN_vkQueueWaitIdle vkQueueWaitIdle; 
			alias PFN_vkDeviceWaitIdle = VkResult function(VkDevice device); 
			PFN_vkDeviceWaitIdle vkDeviceWaitIdle; 
			alias PFN_vkAllocateMemory = VkResult function(VkDevice device,const(VkMemoryAllocateInfo)* pAllocateInfo,const(VkAllocationCallbacks)* pAllocator,VkDeviceMemory* pMemory); 
			PFN_vkAllocateMemory vkAllocateMemory; 
			alias PFN_vkFreeMemory = void function(VkDevice device,VkDeviceMemory memory,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkFreeMemory vkFreeMemory; 
			alias PFN_vkMapMemory = VkResult function(VkDevice device,VkDeviceMemory memory,VkDeviceSize offset,VkDeviceSize size,VkMemoryMapFlags flags,void** ppData); 
			PFN_vkMapMemory vkMapMemory; 
			alias PFN_vkUnmapMemory = void function(VkDevice device,VkDeviceMemory memory); 
			PFN_vkUnmapMemory vkUnmapMemory; 
			alias PFN_vkFlushMappedMemoryRanges = VkResult function(VkDevice device,uint32_t memoryRangeCount,const(VkMappedMemoryRange)* pMemoryRanges); 
			PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges; 
			alias PFN_vkInvalidateMappedMemoryRanges = VkResult function(VkDevice device,uint32_t memoryRangeCount,const(VkMappedMemoryRange)* pMemoryRanges); 
			PFN_vkInvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges; 
			alias PFN_vkGetDeviceMemoryCommitment = void function(VkDevice device,VkDeviceMemory memory,VkDeviceSize* pCommittedMemoryInBytes); 
			PFN_vkGetDeviceMemoryCommitment vkGetDeviceMemoryCommitment; 
			alias PFN_vkBindBufferMemory = VkResult function(VkDevice device,VkBuffer buffer,VkDeviceMemory memory,VkDeviceSize memoryOffset); 
			PFN_vkBindBufferMemory vkBindBufferMemory; 
			alias PFN_vkBindImageMemory = VkResult function(VkDevice device,VkImage image,VkDeviceMemory memory,VkDeviceSize memoryOffset); 
			PFN_vkBindImageMemory vkBindImageMemory; 
			alias PFN_vkGetBufferMemoryRequirements = void function(VkDevice device,VkBuffer buffer,VkMemoryRequirements* pMemoryRequirements); 
			PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements; 
			alias PFN_vkGetImageMemoryRequirements = void function(VkDevice device,VkImage image,VkMemoryRequirements* pMemoryRequirements); 
			PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements; 
			alias PFN_vkGetImageSparseMemoryRequirements = void function(VkDevice device,VkImage image,uint32_t* pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements* pSparseMemoryRequirements); 
			PFN_vkGetImageSparseMemoryRequirements vkGetImageSparseMemoryRequirements; 
			alias PFN_vkGetPhysicalDeviceSparseImageFormatProperties = void function(VkPhysicalDevice physicalDevice,VkFormat format,VkImageType type,VkSampleCountFlagBits samples,VkImageUsageFlags usage,VkImageTiling tiling,uint32_t* pPropertyCount,VkSparseImageFormatProperties* pProperties); 
			PFN_vkGetPhysicalDeviceSparseImageFormatProperties vkGetPhysicalDeviceSparseImageFormatProperties; 
			alias PFN_vkQueueBindSparse = VkResult function(VkQueue queue,uint32_t bindInfoCount,const(VkBindSparseInfo)* pBindInfo,VkFence fence); 
			PFN_vkQueueBindSparse vkQueueBindSparse; 
			alias PFN_vkCreateFence = VkResult function(VkDevice device,const(VkFenceCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkFence* pFence); 
			PFN_vkCreateFence vkCreateFence; 
			alias PFN_vkDestroyFence = void function(VkDevice device,VkFence fence,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyFence vkDestroyFence; 
			alias PFN_vkResetFences = VkResult function(VkDevice device,uint32_t fenceCount,const(VkFence)* pFences); 
			PFN_vkResetFences vkResetFences; 
			alias PFN_vkGetFenceStatus = VkResult function(VkDevice device,VkFence fence); 
			PFN_vkGetFenceStatus vkGetFenceStatus; 
			alias PFN_vkWaitForFences = VkResult function(VkDevice device,uint32_t fenceCount,const(VkFence)* pFences,VkBool32 waitAll,uint64_t timeout); 
			PFN_vkWaitForFences vkWaitForFences; 
			alias PFN_vkCreateSemaphore = VkResult function(VkDevice device,const(VkSemaphoreCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkSemaphore* pSemaphore); 
			PFN_vkCreateSemaphore vkCreateSemaphore; 
			alias PFN_vkDestroySemaphore = void function(VkDevice device,VkSemaphore semaphore,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroySemaphore vkDestroySemaphore; 
			alias PFN_vkCreateEvent = VkResult function(VkDevice device,const(VkEventCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkEvent* pEvent); 
			PFN_vkCreateEvent vkCreateEvent; 
			alias PFN_vkDestroyEvent = void function(VkDevice device,VkEvent event,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyEvent vkDestroyEvent; 
			alias PFN_vkGetEventStatus = VkResult function(VkDevice device,VkEvent event); 
			PFN_vkGetEventStatus vkGetEventStatus; 
			alias PFN_vkSetEvent = VkResult function(VkDevice device,VkEvent event); 
			PFN_vkSetEvent vkSetEvent; 
			alias PFN_vkResetEvent = VkResult function(VkDevice device,VkEvent event); 
			PFN_vkResetEvent vkResetEvent; 
			alias PFN_vkCreateQueryPool = VkResult function(VkDevice device,const(VkQueryPoolCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkQueryPool* pQueryPool); 
			PFN_vkCreateQueryPool vkCreateQueryPool; 
			alias PFN_vkDestroyQueryPool = void function(VkDevice device,VkQueryPool queryPool,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyQueryPool vkDestroyQueryPool; 
			alias PFN_vkGetQueryPoolResults = VkResult function(VkDevice device,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount,size_t dataSize,void* pData,VkDeviceSize stride,VkQueryResultFlags flags); 
			PFN_vkGetQueryPoolResults vkGetQueryPoolResults; 
			alias PFN_vkCreateBuffer = VkResult function(VkDevice device,const(VkBufferCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkBuffer* pBuffer); 
			PFN_vkCreateBuffer vkCreateBuffer; 
			alias PFN_vkDestroyBuffer = void function(VkDevice device,VkBuffer buffer,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyBuffer vkDestroyBuffer; 
			alias PFN_vkCreateBufferView = VkResult function(VkDevice device,const(VkBufferViewCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkBufferView* pView); 
			PFN_vkCreateBufferView vkCreateBufferView; 
			alias PFN_vkDestroyBufferView = void function(VkDevice device,VkBufferView bufferView,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyBufferView vkDestroyBufferView; 
			alias PFN_vkCreateImage = VkResult function(VkDevice device,const(VkImageCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkImage* pImage); 
			PFN_vkCreateImage vkCreateImage; 
			alias PFN_vkDestroyImage = void function(VkDevice device,VkImage image,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyImage vkDestroyImage; 
			alias PFN_vkGetImageSubresourceLayout = void function(VkDevice device,VkImage image,const(VkImageSubresource)* pSubresource,VkSubresourceLayout* pLayout); 
			PFN_vkGetImageSubresourceLayout vkGetImageSubresourceLayout; 
			alias PFN_vkCreateImageView = VkResult function(VkDevice device,const(VkImageViewCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkImageView* pView); 
			PFN_vkCreateImageView vkCreateImageView; 
			alias PFN_vkDestroyImageView = void function(VkDevice device,VkImageView imageView,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyImageView vkDestroyImageView; 
			alias PFN_vkCreateShaderModule = VkResult function(VkDevice device,const(VkShaderModuleCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkShaderModule* pShaderModule); 
			PFN_vkCreateShaderModule vkCreateShaderModule; 
			alias PFN_vkDestroyShaderModule = void function(VkDevice device,VkShaderModule shaderModule,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyShaderModule vkDestroyShaderModule; 
			alias PFN_vkCreatePipelineCache = VkResult function(VkDevice device,const(VkPipelineCacheCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkPipelineCache* pPipelineCache); 
			PFN_vkCreatePipelineCache vkCreatePipelineCache; 
			alias PFN_vkDestroyPipelineCache = void function(VkDevice device,VkPipelineCache pipelineCache,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyPipelineCache vkDestroyPipelineCache; 
			alias PFN_vkGetPipelineCacheData = VkResult function(VkDevice device,VkPipelineCache pipelineCache,size_t* pDataSize,void* pData); 
			PFN_vkGetPipelineCacheData vkGetPipelineCacheData; 
			alias PFN_vkMergePipelineCaches = VkResult function(VkDevice device,VkPipelineCache dstCache,uint32_t srcCacheCount,const(VkPipelineCache)* pSrcCaches); 
			PFN_vkMergePipelineCaches vkMergePipelineCaches; 
			alias PFN_vkCreateGraphicsPipelines = VkResult function(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,const(VkGraphicsPipelineCreateInfo)* pCreateInfos,const(VkAllocationCallbacks)* pAllocator,VkPipeline* pPipelines); 
			PFN_vkCreateGraphicsPipelines vkCreateGraphicsPipelines; 
			alias PFN_vkCreateComputePipelines = VkResult function(VkDevice device,VkPipelineCache pipelineCache,uint32_t createInfoCount,const(VkComputePipelineCreateInfo)* pCreateInfos,const(VkAllocationCallbacks)* pAllocator,VkPipeline* pPipelines); 
			PFN_vkCreateComputePipelines vkCreateComputePipelines; 
			alias PFN_vkDestroyPipeline = void function(VkDevice device,VkPipeline pipeline,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyPipeline vkDestroyPipeline; 
			alias PFN_vkCreatePipelineLayout = VkResult function(VkDevice device,const(VkPipelineLayoutCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkPipelineLayout* pPipelineLayout); 
			PFN_vkCreatePipelineLayout vkCreatePipelineLayout; 
			alias PFN_vkDestroyPipelineLayout = void function(VkDevice device,VkPipelineLayout pipelineLayout,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyPipelineLayout vkDestroyPipelineLayout; 
			alias PFN_vkCreateSampler = VkResult function(VkDevice device,const(VkSamplerCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkSampler* pSampler); 
			PFN_vkCreateSampler vkCreateSampler; 
			alias PFN_vkDestroySampler = void function(VkDevice device,VkSampler sampler,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroySampler vkDestroySampler; 
			alias PFN_vkCreateDescriptorSetLayout = VkResult function(VkDevice device,const(VkDescriptorSetLayoutCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkDescriptorSetLayout* pSetLayout); 
			PFN_vkCreateDescriptorSetLayout vkCreateDescriptorSetLayout; 
			alias PFN_vkDestroyDescriptorSetLayout = void function(VkDevice device,VkDescriptorSetLayout descriptorSetLayout,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyDescriptorSetLayout vkDestroyDescriptorSetLayout; 
			alias PFN_vkCreateDescriptorPool = VkResult function(VkDevice device,const(VkDescriptorPoolCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkDescriptorPool* pDescriptorPool); 
			PFN_vkCreateDescriptorPool vkCreateDescriptorPool; 
			alias PFN_vkDestroyDescriptorPool = void function(VkDevice device,VkDescriptorPool descriptorPool,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyDescriptorPool vkDestroyDescriptorPool; 
			alias PFN_vkResetDescriptorPool = VkResult function(VkDevice device,VkDescriptorPool descriptorPool,VkDescriptorPoolResetFlags flags); 
			PFN_vkResetDescriptorPool vkResetDescriptorPool; 
			alias PFN_vkAllocateDescriptorSets = VkResult function(VkDevice device,const(VkDescriptorSetAllocateInfo)* pAllocateInfo,VkDescriptorSet* pDescriptorSets); 
			PFN_vkAllocateDescriptorSets vkAllocateDescriptorSets; 
			alias PFN_vkFreeDescriptorSets = VkResult function(VkDevice device,VkDescriptorPool descriptorPool,uint32_t descriptorSetCount,const(VkDescriptorSet)* pDescriptorSets); 
			PFN_vkFreeDescriptorSets vkFreeDescriptorSets; 
			alias PFN_vkUpdateDescriptorSets = void function(VkDevice device,uint32_t descriptorWriteCount,const(VkWriteDescriptorSet)* pDescriptorWrites,uint32_t descriptorCopyCount,const(VkCopyDescriptorSet)* pDescriptorCopies); 
			PFN_vkUpdateDescriptorSets vkUpdateDescriptorSets; 
			alias PFN_vkCreateFramebuffer = VkResult function(VkDevice device,const(VkFramebufferCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkFramebuffer* pFramebuffer); 
			PFN_vkCreateFramebuffer vkCreateFramebuffer; 
			alias PFN_vkDestroyFramebuffer = void function(VkDevice device,VkFramebuffer framebuffer,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyFramebuffer vkDestroyFramebuffer; 
			alias PFN_vkCreateRenderPass = VkResult function(VkDevice device,const(VkRenderPassCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkRenderPass* pRenderPass); 
			PFN_vkCreateRenderPass vkCreateRenderPass; 
			alias PFN_vkDestroyRenderPass = void function(VkDevice device,VkRenderPass renderPass,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyRenderPass vkDestroyRenderPass; 
			alias PFN_vkGetRenderAreaGranularity = void function(VkDevice device,VkRenderPass renderPass,VkExtent2D* pGranularity); 
			PFN_vkGetRenderAreaGranularity vkGetRenderAreaGranularity; 
			alias PFN_vkCreateCommandPool = VkResult function(VkDevice device,const(VkCommandPoolCreateInfo)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkCommandPool* pCommandPool); 
			PFN_vkCreateCommandPool vkCreateCommandPool; 
			alias PFN_vkDestroyCommandPool = void function(VkDevice device,VkCommandPool commandPool,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyCommandPool vkDestroyCommandPool; 
			alias PFN_vkResetCommandPool = VkResult function(VkDevice device,VkCommandPool commandPool,VkCommandPoolResetFlags flags); 
			PFN_vkResetCommandPool vkResetCommandPool; 
			alias PFN_vkAllocateCommandBuffers = VkResult function(VkDevice device,const(VkCommandBufferAllocateInfo)* pAllocateInfo,VkCommandBuffer* pCommandBuffers); 
			PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers; 
			alias PFN_vkFreeCommandBuffers = void function(VkDevice device,VkCommandPool commandPool,uint32_t commandBufferCount,const(VkCommandBuffer)* pCommandBuffers); 
			PFN_vkFreeCommandBuffers vkFreeCommandBuffers; 
			alias PFN_vkBeginCommandBuffer = VkResult function(VkCommandBuffer commandBuffer,const(VkCommandBufferBeginInfo)* pBeginInfo); 
			PFN_vkBeginCommandBuffer vkBeginCommandBuffer; 
			alias PFN_vkEndCommandBuffer = VkResult function(VkCommandBuffer commandBuffer); 
			PFN_vkEndCommandBuffer vkEndCommandBuffer; 
			alias PFN_vkResetCommandBuffer = VkResult function(VkCommandBuffer commandBuffer,VkCommandBufferResetFlags flags); 
			PFN_vkResetCommandBuffer vkResetCommandBuffer; 
			alias PFN_vkCmdBindPipeline = void function(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipeline pipeline); 
			PFN_vkCmdBindPipeline vkCmdBindPipeline; 
			alias PFN_vkCmdSetViewport = void function(VkCommandBuffer commandBuffer,uint32_t firstViewport,uint32_t viewportCount,const(VkViewport)* pViewports); 
			PFN_vkCmdSetViewport vkCmdSetViewport; 
			alias PFN_vkCmdSetScissor = void function(VkCommandBuffer commandBuffer,uint32_t firstScissor,uint32_t scissorCount,const(VkRect2D)* pScissors); 
			PFN_vkCmdSetScissor vkCmdSetScissor; 
			alias PFN_vkCmdSetLineWidth = void function(VkCommandBuffer commandBuffer,float lineWidth); 
			PFN_vkCmdSetLineWidth vkCmdSetLineWidth; 
			alias PFN_vkCmdSetDepthBias = void function(VkCommandBuffer commandBuffer,float depthBiasConstantFactor,float depthBiasClamp,float depthBiasSlopeFactor); 
			PFN_vkCmdSetDepthBias vkCmdSetDepthBias; 
			alias PFN_vkCmdSetBlendConstants = void function(VkCommandBuffer commandBuffer,const float[4] blendConstants); 
			PFN_vkCmdSetBlendConstants vkCmdSetBlendConstants; 
			alias PFN_vkCmdSetDepthBounds = void function(VkCommandBuffer commandBuffer,float minDepthBounds,float maxDepthBounds); 
			PFN_vkCmdSetDepthBounds vkCmdSetDepthBounds; 
			alias PFN_vkCmdSetStencilCompareMask = void function(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t compareMask); 
			PFN_vkCmdSetStencilCompareMask vkCmdSetStencilCompareMask; 
			alias PFN_vkCmdSetStencilWriteMask = void function(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t writeMask); 
			PFN_vkCmdSetStencilWriteMask vkCmdSetStencilWriteMask; 
			alias PFN_vkCmdSetStencilReference = void function(VkCommandBuffer commandBuffer,VkStencilFaceFlags faceMask,uint32_t reference); 
			PFN_vkCmdSetStencilReference vkCmdSetStencilReference; 
			alias PFN_vkCmdBindDescriptorSets = void function(VkCommandBuffer commandBuffer,VkPipelineBindPoint pipelineBindPoint,VkPipelineLayout layout,uint32_t firstSet,uint32_t descriptorSetCount,const(VkDescriptorSet)* pDescriptorSets,uint32_t dynamicOffsetCount,const(uint32_t)* pDynamicOffsets); 
			PFN_vkCmdBindDescriptorSets vkCmdBindDescriptorSets; 
			alias PFN_vkCmdBindIndexBuffer = void function(VkCommandBuffer commandBuffer,VkBuffer buffer,VkDeviceSize offset,VkIndexType indexType); 
			PFN_vkCmdBindIndexBuffer vkCmdBindIndexBuffer; 
			alias PFN_vkCmdBindVertexBuffers = void function(VkCommandBuffer commandBuffer,uint32_t firstBinding,uint32_t bindingCount,const(VkBuffer)* pBuffers,const(VkDeviceSize)* pOffsets); 
			PFN_vkCmdBindVertexBuffers vkCmdBindVertexBuffers; 
			alias PFN_vkCmdDraw = void function(VkCommandBuffer commandBuffer,uint32_t vertexCount,uint32_t instanceCount,uint32_t firstVertex,uint32_t firstInstance); 
			PFN_vkCmdDraw vkCmdDraw; 
			alias PFN_vkCmdDrawIndexed = void function(VkCommandBuffer commandBuffer,uint32_t indexCount,uint32_t instanceCount,uint32_t firstIndex,int32_t vertexOffset,uint32_t firstInstance); 
			PFN_vkCmdDrawIndexed vkCmdDrawIndexed; 
			alias PFN_vkCmdDrawIndirect = void function(VkCommandBuffer commandBuffer,VkBuffer buffer,VkDeviceSize offset,uint32_t drawCount,uint32_t stride); 
			PFN_vkCmdDrawIndirect vkCmdDrawIndirect; 
			alias PFN_vkCmdDrawIndexedIndirect = void function(VkCommandBuffer commandBuffer,VkBuffer buffer,VkDeviceSize offset,uint32_t drawCount,uint32_t stride); 
			PFN_vkCmdDrawIndexedIndirect vkCmdDrawIndexedIndirect; 
			alias PFN_vkCmdDispatch = void function(VkCommandBuffer commandBuffer,uint32_t x,uint32_t y,uint32_t z); 
			PFN_vkCmdDispatch vkCmdDispatch; 
			alias PFN_vkCmdDispatchIndirect = void function(VkCommandBuffer commandBuffer,VkBuffer buffer,VkDeviceSize offset); 
			PFN_vkCmdDispatchIndirect vkCmdDispatchIndirect; 
			alias PFN_vkCmdCopyBuffer = void function(VkCommandBuffer commandBuffer,VkBuffer srcBuffer,VkBuffer dstBuffer,uint32_t regionCount,const(VkBufferCopy)* pRegions); 
			PFN_vkCmdCopyBuffer vkCmdCopyBuffer; 
			alias PFN_vkCmdCopyImage = void function(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,const(VkImageCopy)* pRegions); 
			PFN_vkCmdCopyImage vkCmdCopyImage; 
			alias PFN_vkCmdBlitImage = void function(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,const(VkImageBlit)* pRegions,VkFilter filter); 
			PFN_vkCmdBlitImage vkCmdBlitImage; 
			alias PFN_vkCmdCopyBufferToImage = void function(VkCommandBuffer commandBuffer,VkBuffer srcBuffer,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,const(VkBufferImageCopy)* pRegions); 
			PFN_vkCmdCopyBufferToImage vkCmdCopyBufferToImage; 
			alias PFN_vkCmdCopyImageToBuffer = void function(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkBuffer dstBuffer,uint32_t regionCount,const(VkBufferImageCopy)* pRegions); 
			PFN_vkCmdCopyImageToBuffer vkCmdCopyImageToBuffer; 
			alias PFN_vkCmdUpdateBuffer = void function(VkCommandBuffer commandBuffer,VkBuffer dstBuffer,VkDeviceSize dstOffset,VkDeviceSize dataSize,const(uint32_t)* pData); 
			PFN_vkCmdUpdateBuffer vkCmdUpdateBuffer; 
			alias PFN_vkCmdFillBuffer = void function(VkCommandBuffer commandBuffer,VkBuffer dstBuffer,VkDeviceSize dstOffset,VkDeviceSize size,uint32_t data); 
			PFN_vkCmdFillBuffer vkCmdFillBuffer; 
			alias PFN_vkCmdClearColorImage = void function(VkCommandBuffer commandBuffer,VkImage image,VkImageLayout imageLayout,const(VkClearColorValue)* pColor,uint32_t rangeCount,const(VkImageSubresourceRange)* pRanges); 
			PFN_vkCmdClearColorImage vkCmdClearColorImage; 
			alias PFN_vkCmdClearDepthStencilImage = void function(VkCommandBuffer commandBuffer,VkImage image,VkImageLayout imageLayout,const(VkClearDepthStencilValue)* pDepthStencil,uint32_t rangeCount,const(VkImageSubresourceRange)* pRanges); 
			PFN_vkCmdClearDepthStencilImage vkCmdClearDepthStencilImage; 
			alias PFN_vkCmdClearAttachments = void function(VkCommandBuffer commandBuffer,uint32_t attachmentCount,const(VkClearAttachment)* pAttachments,uint32_t rectCount,const(VkClearRect)* pRects); 
			PFN_vkCmdClearAttachments vkCmdClearAttachments; 
			alias PFN_vkCmdResolveImage = void function(VkCommandBuffer commandBuffer,VkImage srcImage,VkImageLayout srcImageLayout,VkImage dstImage,VkImageLayout dstImageLayout,uint32_t regionCount,const(VkImageResolve)* pRegions); 
			PFN_vkCmdResolveImage vkCmdResolveImage; 
			alias PFN_vkCmdSetEvent = void function(VkCommandBuffer commandBuffer,VkEvent event,VkPipelineStageFlags stageMask); 
			PFN_vkCmdSetEvent vkCmdSetEvent; 
			alias PFN_vkCmdResetEvent = void function(VkCommandBuffer commandBuffer,VkEvent event,VkPipelineStageFlags stageMask); 
			PFN_vkCmdResetEvent vkCmdResetEvent; 
			alias PFN_vkCmdWaitEvents = void function(VkCommandBuffer commandBuffer,uint32_t eventCount,const(VkEvent)* pEvents,VkPipelineStageFlags srcStageMask,VkPipelineStageFlags dstStageMask,uint32_t memoryBarrierCount,const(VkMemoryBarrier)* pMemoryBarriers,uint32_t bufferMemoryBarrierCount,const(VkBufferMemoryBarrier)* pBufferMemoryBarriers,uint32_t imageMemoryBarrierCount,const(VkImageMemoryBarrier)* pImageMemoryBarriers); 
			PFN_vkCmdWaitEvents vkCmdWaitEvents; 
			alias PFN_vkCmdPipelineBarrier = void function(VkCommandBuffer commandBuffer,VkPipelineStageFlags srcStageMask,VkPipelineStageFlags dstStageMask,VkDependencyFlags dependencyFlags,uint32_t memoryBarrierCount,const(VkMemoryBarrier)* pMemoryBarriers,uint32_t bufferMemoryBarrierCount,const(VkBufferMemoryBarrier)* pBufferMemoryBarriers,uint32_t imageMemoryBarrierCount,const(VkImageMemoryBarrier)* pImageMemoryBarriers); 
			PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier; 
			alias PFN_vkCmdBeginQuery = void function(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query,VkQueryControlFlags flags); 
			PFN_vkCmdBeginQuery vkCmdBeginQuery; 
			alias PFN_vkCmdEndQuery = void function(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t query); 
			PFN_vkCmdEndQuery vkCmdEndQuery; 
			alias PFN_vkCmdResetQueryPool = void function(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount); 
			PFN_vkCmdResetQueryPool vkCmdResetQueryPool; 
			alias PFN_vkCmdWriteTimestamp = void function(VkCommandBuffer commandBuffer,VkPipelineStageFlagBits pipelineStage,VkQueryPool queryPool,uint32_t query); 
			PFN_vkCmdWriteTimestamp vkCmdWriteTimestamp; 
			alias PFN_vkCmdCopyQueryPoolResults = void function(VkCommandBuffer commandBuffer,VkQueryPool queryPool,uint32_t firstQuery,uint32_t queryCount,VkBuffer dstBuffer,VkDeviceSize dstOffset,VkDeviceSize stride,VkQueryResultFlags flags); 
			PFN_vkCmdCopyQueryPoolResults vkCmdCopyQueryPoolResults; 
			alias PFN_vkCmdPushConstants = void function(VkCommandBuffer commandBuffer,VkPipelineLayout layout,VkShaderStageFlags stageFlags,uint32_t offset,uint32_t size,const(void)* pValues); 
			PFN_vkCmdPushConstants vkCmdPushConstants; 
			alias PFN_vkCmdBeginRenderPass = void function(VkCommandBuffer commandBuffer,const(VkRenderPassBeginInfo)* pRenderPassBegin,VkSubpassContents contents); 
			PFN_vkCmdBeginRenderPass vkCmdBeginRenderPass; 
			alias PFN_vkCmdNextSubpass = void function(VkCommandBuffer commandBuffer,VkSubpassContents contents); 
			PFN_vkCmdNextSubpass vkCmdNextSubpass; 
			alias PFN_vkCmdEndRenderPass = void function(VkCommandBuffer commandBuffer); 
			PFN_vkCmdEndRenderPass vkCmdEndRenderPass; 
			alias PFN_vkCmdExecuteCommands = void function(VkCommandBuffer commandBuffer,uint32_t commandBufferCount,const(VkCommandBuffer)* pCommandBuffers); 
			PFN_vkCmdExecuteCommands vkCmdExecuteCommands; 
		}
		version(DVulkan_VK_KHR_surface)
		{
			alias PFN_vkDestroySurfaceKHR = void function(VkInstance instance,VkSurfaceKHR surface,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroySurfaceKHR vkDestroySurfaceKHR; 
			alias PFN_vkGetPhysicalDeviceSurfaceSupportKHR = VkResult function(VkPhysicalDevice physicalDevice,uint32_t queueFamilyIndex,VkSurfaceKHR surface,VkBool32* pSupported); 
			PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkGetPhysicalDeviceSurfaceSupportKHR; 
			alias PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = VkResult function(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,VkSurfaceCapabilitiesKHR* pSurfaceCapabilities); 
			PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkGetPhysicalDeviceSurfaceCapabilitiesKHR; 
			alias PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = VkResult function(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pSurfaceFormatCount,VkSurfaceFormatKHR* pSurfaceFormats); 
			PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkGetPhysicalDeviceSurfaceFormatsKHR; 
			alias PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = VkResult function(VkPhysicalDevice physicalDevice,VkSurfaceKHR surface,uint32_t* pPresentModeCount,VkPresentModeKHR* pPresentModes); 
			PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkGetPhysicalDeviceSurfacePresentModesKHR; 
		}
		
		//het
		version(DVulkan_VK_KHR_win32_surface)
		{
			alias PFN_vkCreateWin32SurfaceKHR = VkResult function(VkInstance instance, const(VkWin32SurfaceCreateInfoKHR)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkSurfaceKHR* pSurface); 
			PFN_vkCreateWin32SurfaceKHR vkCreateWin32SurfaceKHR; 
		}
		
		version(DVulkan_VK_KHR_swapchain)
		{
			alias PFN_vkCreateSwapchainKHR = VkResult function(VkDevice device,const(VkSwapchainCreateInfoKHR)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkSwapchainKHR* pSwapchain); 
			PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR; 
			alias PFN_vkDestroySwapchainKHR = void function(VkDevice device,VkSwapchainKHR swapchain,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR; 
			alias PFN_vkGetSwapchainImagesKHR = VkResult function(VkDevice device,VkSwapchainKHR swapchain,uint32_t* pSwapchainImageCount,VkImage* pSwapchainImages); 
			PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR; 
			alias PFN_vkAcquireNextImageKHR = VkResult function(VkDevice device,VkSwapchainKHR swapchain,uint64_t timeout,VkSemaphore semaphore,VkFence fence,uint32_t* pImageIndex); 
			PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR; 
			alias PFN_vkQueuePresentKHR = VkResult function(VkQueue queue,const(VkPresentInfoKHR)* pPresentInfo); 
			PFN_vkQueuePresentKHR vkQueuePresentKHR; 
		}
		version(DVulkan_VK_KHR_display)
		{
			alias PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = VkResult function(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayPropertiesKHR* pProperties); 
			PFN_vkGetPhysicalDeviceDisplayPropertiesKHR vkGetPhysicalDeviceDisplayPropertiesKHR; 
			alias PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = VkResult function(VkPhysicalDevice physicalDevice,uint32_t* pPropertyCount,VkDisplayPlanePropertiesKHR* pProperties); 
			PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR vkGetPhysicalDeviceDisplayPlanePropertiesKHR; 
			alias PFN_vkGetDisplayPlaneSupportedDisplaysKHR = VkResult function(VkPhysicalDevice physicalDevice,uint32_t planeIndex,uint32_t* pDisplayCount,VkDisplayKHR* pDisplays); 
			PFN_vkGetDisplayPlaneSupportedDisplaysKHR vkGetDisplayPlaneSupportedDisplaysKHR; 
			alias PFN_vkGetDisplayModePropertiesKHR = VkResult function(VkPhysicalDevice physicalDevice,VkDisplayKHR display,uint32_t* pPropertyCount,VkDisplayModePropertiesKHR* pProperties); 
			PFN_vkGetDisplayModePropertiesKHR vkGetDisplayModePropertiesKHR; 
			alias PFN_vkCreateDisplayModeKHR = VkResult function(VkPhysicalDevice physicalDevice,VkDisplayKHR display,const(VkDisplayModeCreateInfoKHR)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkDisplayModeKHR* pMode); 
			PFN_vkCreateDisplayModeKHR vkCreateDisplayModeKHR; 
			alias PFN_vkGetDisplayPlaneCapabilitiesKHR = VkResult function(VkPhysicalDevice physicalDevice,VkDisplayModeKHR mode,uint32_t planeIndex,VkDisplayPlaneCapabilitiesKHR* pCapabilities); 
			PFN_vkGetDisplayPlaneCapabilitiesKHR vkGetDisplayPlaneCapabilitiesKHR; 
			alias PFN_vkCreateDisplayPlaneSurfaceKHR = VkResult function(VkInstance instance,const(VkDisplaySurfaceCreateInfoKHR)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkSurfaceKHR* pSurface); 
			PFN_vkCreateDisplayPlaneSurfaceKHR vkCreateDisplayPlaneSurfaceKHR; 
		}
		version(DVulkan_VK_KHR_display_swapchain)
		{
			alias PFN_vkCreateSharedSwapchainsKHR = VkResult function(VkDevice device,uint32_t swapchainCount,const(VkSwapchainCreateInfoKHR)* pCreateInfos,const(VkAllocationCallbacks)* pAllocator,VkSwapchainKHR* pSwapchains); 
			PFN_vkCreateSharedSwapchainsKHR vkCreateSharedSwapchainsKHR; 
		}
		version(DVulkan_VK_EXT_debug_report)
		{
			alias PFN_vkCreateDebugReportCallbackEXT = VkResult function(VkInstance instance,const(VkDebugReportCallbackCreateInfoEXT)* pCreateInfo,const(VkAllocationCallbacks)* pAllocator,VkDebugReportCallbackEXT* pCallback); 
			PFN_vkCreateDebugReportCallbackEXT vkCreateDebugReportCallbackEXT; 
			alias PFN_vkDestroyDebugReportCallbackEXT = void function(VkInstance instance,VkDebugReportCallbackEXT callback,const(VkAllocationCallbacks)* pAllocator); 
			PFN_vkDestroyDebugReportCallbackEXT vkDestroyDebugReportCallbackEXT; 
			alias PFN_vkDebugReportMessageEXT = void function(VkInstance instance,VkDebugReportFlagsEXT flags,VkDebugReportObjectTypeEXT objectType,uint64_t object,size_t location,int32_t messageCode,const(char)* pLayerPrefix,const(char)* pMessage); 
			PFN_vkDebugReportMessageEXT vkDebugReportMessageEXT; 
		}
		version(DVulkan_VK_EXT_debug_marker)
		{
			alias PFN_vkDebugMarkerSetObjectTagEXT = VkResult function(VkDevice device,VkDebugMarkerObjectTagInfoEXT* pTagInfo); 
			PFN_vkDebugMarkerSetObjectTagEXT vkDebugMarkerSetObjectTagEXT; 
			alias PFN_vkDebugMarkerSetObjectNameEXT = VkResult function(VkDevice device,VkDebugMarkerObjectNameInfoEXT* pNameInfo); 
			PFN_vkDebugMarkerSetObjectNameEXT vkDebugMarkerSetObjectNameEXT; 
			alias PFN_vkCmdDebugMarkerBeginEXT = void function(VkCommandBuffer commandBuffer,VkDebugMarkerMarkerInfoEXT* pMarkerInfo); 
			PFN_vkCmdDebugMarkerBeginEXT vkCmdDebugMarkerBeginEXT; 
			alias PFN_vkCmdDebugMarkerEndEXT = void function(VkCommandBuffer commandBuffer); 
			PFN_vkCmdDebugMarkerEndEXT vkCmdDebugMarkerEndEXT; 
			alias PFN_vkCmdDebugMarkerInsertEXT = void function(VkCommandBuffer commandBuffer,VkDebugMarkerMarkerInfoEXT* pMarkerInfo); 
			PFN_vkCmdDebugMarkerInsertEXT vkCmdDebugMarkerInsertEXT; 
		}
	} 
} 


//Todo: dide builder to ignore unknown modules, like: derelict.util.loader    Because sometimes (version()) they will not be compiled at all.
/+
	version(DVulkanDerelict) {
		version(Have_derelict_util) {}
		else static assert(false, "DVulkanDerelict specified but derelict-util is not available. Add derelict-util to your dependencies.");
	
		import derelict.util.loader;
		import derelict.util.system;
	
		private {
			version(Windows)
				enum libNames = "vulkan-1.dll";
			else version(linux)
				enum libNames = "libvulkan.so.1";
			else
				static assert(0,"Need to implement DVulkan libNames for this operating system.");
		}
	
		/// Loader using Derelict to load the Vulkan shared library.
		class DVulkanDerelictLoader : SharedLibLoader {
			private VulkanFunctions.PFN_vkGetInstanceProcAddr getInstanceProcAddr;
			this() {
				super(libNames);
			}
	
			protected override void loadSymbols() {
				bindFunc(cast(void**)&getInstanceProcAddr, "vkGetInstanceProcAddr");
			}
	
			/// Returns initialization function pointers from the shared library.
			/// See VulkanFunctions.loadInitializationFunctions.
			VulkanFunctions getInitializationFunctions() {
				assert(getInstanceProcAddr, "getInitializationFunctions called before library loaded");
				VulkanFunctions funcs;
				funcs.loadInitializationFunctions(getInstanceProcAddr);
				return funcs;
			}
	
			version(DVulkanGlobalFunctions) {
				/// Loads initialization function pointers from the shared library to the global functions.
				/// See VulkanFunctions.loadInitializationFunctions.
				void loadInitializationFunctions() {
					assert(getInstanceProcAddr, "loadInitializationFunctions called before library loaded");
					static import dvulkan.global;
					dvulkan.global.loadInitializationFunctions(getInstanceProcAddr);
				}
			}
		}
	
		__gshared DVulkanDerelictLoader DVulkanDerelict;
	
		shared static this() {
			DVulkanDerelict = new DVulkanDerelictLoader();
		}
	} 
+/