/// Vulkan types.
module dvulkan.types; 
import std.traits, std.format; 
version(/+$DIDE_REGION+/all)
{
	
	//het
	import std.typecons, std.algorithm; 
	struct VkBitFlags(E, Flag!"unsafe" unsafe=No.unsafe)
	{
		BitFlags!(E, unsafe) _bitflags; 
		alias _bitflags this; 
		
		this(A)(A a) { _bitflags = a; } 
		
		string toString() const
		{
			import std.conv, std.format, std.array; 
			string[] res; ulong remaining; 
			auto a = cast(ulong) this; 
			for(ulong i=1; a; i<<=1, a>>=1)
			if(a&1)
			{
				const s = (cast(E)i).text; 
				if(s.startsWith("cast("))
				remaining |= i; 
				else
				res ~= s; 
			}
			
			if(remaining) res ~= remaining.format!"0x%x"; 
			if(res.empty) res = ["0"]; 
			return format!"%s(%s)"(E.stringof, res.join(" | ")); 
		} 
	} 
	
	
	//THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY.
	alias uint8_t = ubyte; 
	alias uint16_t = ushort; 
	alias uint32_t = uint; 
	alias uint64_t = ulong; 
	alias int8_t = byte; 
	alias int16_t = short; 
	alias int32_t = int; 
	alias int64_t = long; 
	
	@nogc pure nothrow
	{
		uint VK_MAKE_VERSION(uint major, uint minor, uint patch)
		{ return (major << 22) | (minor << 12) | (patch); } 
		uint VK_VERSION_MAJOR(uint ver)
		{ return ver >> 22; } 
		uint VK_VERSION_MINOR(uint ver)
		{ return (ver >> 12) & 0x3ff; } 
		uint VK_VERSION_PATCH(uint ver)
		{ return ver & 0xfff; } 
	} 
	
	/+
		+ On 32-bit systems, VK_NULL_HANDLE must be compatible with both opaque struct pointers
		+ (for dispatchable object) and integers (for nondispatchable objects). This is not possible
		+ with D's type system, which doesn't implicitly convert 0 to the null pointer as in C
		+ (for better or for worse). Either use the `VK_NULL_[NON_]DISPATCHABLE_HANDLE` constants or
		+ `Vk(Type).init`.
		+
		+ See also https://github.com/ColonelThirtyTwo/dvulkan/issues/13
	+/
	
	deprecated("VK_NULL_HANDLE is impossible to implement portably in D. Use Vk(Type).init or VK_NULL_[NON_]DISPATCHABLE_HANDLE") enum VK_NULL_HANDLE = null; 
	
	enum VK_DEFINE_HANDLE(string name) = "struct "~name~"_handle; alias "~name~" = "~name~"_handle*;"; 
	
	enum VK_NULL_DISPATCHABLE_HANDLE = null; 
	version(X86_64)
	{
		alias VK_DEFINE_NON_DISPATCHABLE_HANDLE(string name) = VK_DEFINE_HANDLE!name; 
		enum VK_NULL_NON_DISPATCHABLE_HANDLE = null; 
	}else
	{
		enum VK_DEFINE_NON_DISPATCHABLE_HANDLE(string name) = "alias "~name~" = ulong;"; 
		enum VK_NULL_NON_DISPATCHABLE_HANDLE = 0; 
	}
	version(DVulkanAllExtensions)
	{
		version = DVulkan_VK_VERSION_1_0; 
		version = DVulkan_VK_KHR_surface; 
		version = DVulkan_VK_KHR_win32_surface; //het
		version = DVulkan_VK_KHR_swapchain; 
		version = DVulkan_VK_KHR_display; 
		version = DVulkan_VK_KHR_display_swapchain; 
		version = DVulkan_VK_KHR_sampler_mirror_clamp_to_edge; 
		version = DVulkan_VK_ANDROID_native_buffer; 
		version = DVulkan_VK_EXT_debug_report; 
		version = DVulkan_VK_NV_glsl_shader; 
		version = DVulkan_VK_NV_extension_1; 
		version = DVulkan_VK_IMG_filter_cubic; 
		version = DVulkan_VK_AMD_extension_1; 
		version = DVulkan_VK_AMD_extension_2; 
		version = DVulkan_VK_AMD_rasterization_order; 
		version = DVulkan_VK_AMD_extension_4; 
		version = DVulkan_VK_AMD_extension_5; 
		version = DVulkan_VK_AMD_extension_6; 
		version = DVulkan_VK_EXT_debug_marker; 
	}
	
	version(DVulkan_VK_VERSION_1_0)
	{
		enum VkPipelineCacheHeaderVersion
		{ VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1, } 
		enum VK_LOD_CLAMP_NONE = 1000.0f; 
		enum VK_REMAINING_MIP_LEVELS = (~0U); 
		enum VK_REMAINING_ARRAY_LAYERS = (~0U); 
		enum VK_WHOLE_SIZE = (~0UL); 
		enum VK_ATTACHMENT_UNUSED = (~0U); 
		enum VK_TRUE = 1; 
		enum VK_FALSE = 0; 
		enum VK_QUEUE_FAMILY_IGNORED = (~0U); 
		enum VK_SUBPASS_EXTERNAL = (~0U); 
		
		enum VkResult
		{
			VK_SUCCESS = 0,
			VK_NOT_READY = 1,
			VK_TIMEOUT = 2,
			VK_EVENT_SET = 3,
			VK_EVENT_RESET = 4,
			VK_INCOMPLETE = 5,
			VK_ERROR_OUT_OF_HOST_MEMORY = -1,
			VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
			VK_ERROR_INITIALIZATION_FAILED = -3,
			VK_ERROR_DEVICE_LOST = -4,
			VK_ERROR_MEMORY_MAP_FAILED = -5,
			VK_ERROR_LAYER_NOT_PRESENT = -6,
			VK_ERROR_EXTENSION_NOT_PRESENT = -7,
			VK_ERROR_FEATURE_NOT_PRESENT = -8,
			VK_ERROR_INCOMPATIBLE_DRIVER = -9,
			VK_ERROR_TOO_MANY_OBJECTS = -10,
			VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
			VK_ERROR_SURFACE_LOST_KHR = -1000000000,
			VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
			VK_SUBOPTIMAL_KHR = 1000001003,
			VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
			VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
			VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
			VK_ERROR_INVALID_SHADER_NV = -1000012000,
			VK_NV_EXTENSION_1_ERROR = -1000013000,
		} 
		
		static foreach(r; EnumMembers!VkResult) mixin(format!"enum %s = VkResult.%s;"(r, r)); 
		
		alias VkStructureType = VK_STRUCTURE_TYPE_; 
		enum VK_STRUCTURE_TYPE_
		{
			APPLICATION_INFO = 0,
			INSTANCE_CREATE_INFO = 1,
			DEVICE_QUEUE_CREATE_INFO = 2,
			DEVICE_CREATE_INFO = 3,
			SUBMIT_INFO = 4,
			MEMORY_ALLOCATE_INFO = 5,
			MAPPED_MEMORY_RANGE = 6,
			BIND_SPARSE_INFO = 7,
			FENCE_CREATE_INFO = 8,
			SEMAPHORE_CREATE_INFO = 9,
			EVENT_CREATE_INFO = 10,
			QUERY_POOL_CREATE_INFO = 11,
			BUFFER_CREATE_INFO = 12,
			BUFFER_VIEW_CREATE_INFO = 13,
			IMAGE_CREATE_INFO = 14,
			IMAGE_VIEW_CREATE_INFO = 15,
			SHADER_MODULE_CREATE_INFO = 16,
			PIPELINE_CACHE_CREATE_INFO = 17,
			PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
			PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
			PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
			PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
			PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
			PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
			PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
			PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
			PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
			PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
			GRAPHICS_PIPELINE_CREATE_INFO = 28,
			COMPUTE_PIPELINE_CREATE_INFO = 29,
			PIPELINE_LAYOUT_CREATE_INFO = 30,
			SAMPLER_CREATE_INFO = 31,
			DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
			DESCRIPTOR_POOL_CREATE_INFO = 33,
			DESCRIPTOR_SET_ALLOCATE_INFO = 34,
			WRITE_DESCRIPTOR_SET = 35,
			COPY_DESCRIPTOR_SET = 36,
			FRAMEBUFFER_CREATE_INFO = 37,
			RENDER_PASS_CREATE_INFO = 38,
			COMMAND_POOL_CREATE_INFO = 39,
			COMMAND_BUFFER_ALLOCATE_INFO = 40,
			COMMAND_BUFFER_INHERITANCE_INFO = 41,
			COMMAND_BUFFER_BEGIN_INFO = 42,
			RENDER_PASS_BEGIN_INFO = 43,
			BUFFER_MEMORY_BARRIER = 44,
			IMAGE_MEMORY_BARRIER = 45,
			MEMORY_BARRIER = 46,
			LOADER_INSTANCE_CREATE_INFO = 47,
			LOADER_DEVICE_CREATE_INFO = 48,
			SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
			PRESENT_INFO_KHR = 1000001001,
			DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
			DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
			DISPLAY_PRESENT_INFO_KHR = 1000003000,
			XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
			XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
			WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
			MIR_SURFACE_CREATE_INFO_KHR = 1000007000,
			ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
			WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
			DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
			PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
			DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
			DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
			DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
		} 
		alias VkFlags = uint32_t; 
		alias VkInstanceCreateFlags = VkFlags; 
		struct VkApplicationInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.APPLICATION_INFO; 
			const(void)* pNext; 
			const(char)* pApplicationName; 
			uint32_t applicationVersion; 
			const(char)* pEngineName; 
			uint32_t engineVersion; 
			uint32_t apiVersion; 
		} 
		struct VkInstanceCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.INSTANCE_CREATE_INFO; 
			const(void)* pNext; 
			VkInstanceCreateFlags flags; 
			const(VkApplicationInfo)* pApplicationInfo; 
			uint32_t enabledLayerCount; 
			const(char*)* ppEnabledLayerNames; 
			uint32_t enabledExtensionCount; 
			const(char*)* ppEnabledExtensionNames; 
		} 
		
		enum VkSystemAllocationScope
		{
			VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
			VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
			VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
			VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
			VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
		} 
		
		alias PFN_vkAllocationFunction = void* function(
			void*	pUserData,
			size_t	size,
			size_t	alignment,
			VkSystemAllocationScope 	allocationScope
		); 
		alias PFN_vkReallocationFunction = void* function(
			void*	pUserData,
			void*	pOriginal,
			size_t	size,
			size_t	alignment,
			VkSystemAllocationScope 	allocationScope
		); 
		alias PFN_vkFreeFunction = void function(
			void* 	pUserData,
			void*	pMemory
		); 
		enum VkInternalAllocationType
		{ VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0, } 
		alias PFN_vkInternalAllocationNotification = void function(
			void*	pUserData,
			size_t	size,
			VkInternalAllocationType	allocationType,
			VkSystemAllocationScope 	allocationScope
		); 
		alias PFN_vkInternalFreeNotification = void function(
			void*	pUserData,
			size_t	size,
			VkInternalAllocationType	allocationType,
			VkSystemAllocationScope 	allocationScope
		); 
		struct VkAllocationCallbacks
		{
			void* pUserData; 
			PFN_vkAllocationFunction pfnAllocation; 
			PFN_vkReallocationFunction pfnReallocation; 
			PFN_vkFreeFunction pfnFree; 
			PFN_vkInternalAllocationNotification pfnInternalAllocation; 
			PFN_vkInternalFreeNotification pfnInternalFree; 
		} 
		mixin(VK_DEFINE_HANDLE!q{VkInstance}); 
		mixin(VK_DEFINE_HANDLE!q{VkPhysicalDevice}); 
		alias VkBool32 = uint32_t; 
		struct VkPhysicalDeviceFeatures
		{
			VkBool32 robustBufferAccess; 
			VkBool32 fullDrawIndexUint32; 
			VkBool32 imageCubeArray; 
			VkBool32 independentBlend; 
			VkBool32 geometryShader; 
			VkBool32 tessellationShader; 
			VkBool32 sampleRateShading; 
			VkBool32 dualSrcBlend; 
			VkBool32 logicOp; 
			VkBool32 multiDrawIndirect; 
			VkBool32 drawIndirectFirstInstance; 
			VkBool32 depthClamp; 
			VkBool32 depthBiasClamp; 
			VkBool32 fillModeNonSolid; 
			VkBool32 depthBounds; 
			VkBool32 wideLines; 
			VkBool32 largePoints; 
			VkBool32 alphaToOne; 
			VkBool32 multiViewport; 
			VkBool32 samplerAnisotropy; 
			VkBool32 textureCompressionETC2; 
			VkBool32 textureCompressionASTC_LDR; 
			VkBool32 textureCompressionBC; 
			VkBool32 occlusionQueryPrecise; 
			VkBool32 pipelineStatisticsQuery; 
			VkBool32 vertexPipelineStoresAndAtomics; 
			VkBool32 fragmentStoresAndAtomics; 
			VkBool32 shaderTessellationAndGeometryPointSize; 
			VkBool32 shaderImageGatherExtended; 
			VkBool32 shaderStorageImageExtendedFormats; 
			VkBool32 shaderStorageImageMultisample; 
			VkBool32 shaderStorageImageReadWithoutFormat; 
			VkBool32 shaderStorageImageWriteWithoutFormat; 
			VkBool32 shaderUniformBufferArrayDynamicIndexing; 
			VkBool32 shaderSampledImageArrayDynamicIndexing; 
			VkBool32 shaderStorageBufferArrayDynamicIndexing; 
			VkBool32 shaderStorageImageArrayDynamicIndexing; 
			VkBool32 shaderClipDistance; 
			VkBool32 shaderCullDistance; 
			VkBool32 shaderFloat64; 
			VkBool32 shaderInt64; 
			VkBool32 shaderInt16; 
			VkBool32 shaderResourceResidency; 
			VkBool32 shaderResourceMinLod; 
			VkBool32 sparseBinding; 
			VkBool32 sparseResidencyBuffer; 
			VkBool32 sparseResidencyImage2D; 
			VkBool32 sparseResidencyImage3D; 
			VkBool32 sparseResidency2Samples; 
			VkBool32 sparseResidency4Samples; 
			VkBool32 sparseResidency8Samples; 
			VkBool32 sparseResidency16Samples; 
			VkBool32 sparseResidencyAliased; 
			VkBool32 variableMultisampleRate; 
			VkBool32 inheritedQueries; 
		} 
		alias VkFormat = VK_FORMAT_; 
		enum VK_FORMAT_
		{
			UNDEFINED = 0,
			R4G4_UNORM_PACK8 = 1,
			R4G4B4A4_UNORM_PACK16 = 2,
			B4G4R4A4_UNORM_PACK16 = 3,
			R5G6B5_UNORM_PACK16 = 4,
			B5G6R5_UNORM_PACK16 = 5,
			R5G5B5A1_UNORM_PACK16 = 6,
			B5G5R5A1_UNORM_PACK16 = 7,
			A1R5G5B5_UNORM_PACK16 = 8,
			R8_UNORM = 9,
			R8_SNORM = 10,
			R8_USCALED = 11,
			R8_SSCALED = 12,
			R8_UINT = 13,
			R8_SINT = 14,
			R8_SRGB = 15,
			R8G8_UNORM = 16,
			R8G8_SNORM = 17,
			R8G8_USCALED = 18,
			R8G8_SSCALED = 19,
			R8G8_UINT = 20,
			R8G8_SINT = 21,
			R8G8_SRGB = 22,
			R8G8B8_UNORM = 23,
			R8G8B8_SNORM = 24,
			R8G8B8_USCALED = 25,
			R8G8B8_SSCALED = 26,
			R8G8B8_UINT = 27,
			R8G8B8_SINT = 28,
			R8G8B8_SRGB = 29,
			B8G8R8_UNORM = 30,
			B8G8R8_SNORM = 31,
			B8G8R8_USCALED = 32,
			B8G8R8_SSCALED = 33,
			B8G8R8_UINT = 34,
			B8G8R8_SINT = 35,
			B8G8R8_SRGB = 36,
			R8G8B8A8_UNORM = 37,
			R8G8B8A8_SNORM = 38,
			R8G8B8A8_USCALED = 39,
			R8G8B8A8_SSCALED = 40,
			R8G8B8A8_UINT = 41,
			R8G8B8A8_SINT = 42,
			R8G8B8A8_SRGB = 43,
			B8G8R8A8_UNORM = 44,
			B8G8R8A8_SNORM = 45,
			B8G8R8A8_USCALED = 46,
			B8G8R8A8_SSCALED = 47,
			B8G8R8A8_UINT = 48,
			B8G8R8A8_SINT = 49,
			B8G8R8A8_SRGB = 50,
			A8B8G8R8_UNORM_PACK32 = 51,
			A8B8G8R8_SNORM_PACK32 = 52,
			A8B8G8R8_USCALED_PACK32 = 53,
			A8B8G8R8_SSCALED_PACK32 = 54,
			A8B8G8R8_UINT_PACK32 = 55,
			A8B8G8R8_SINT_PACK32 = 56,
			A8B8G8R8_SRGB_PACK32 = 57,
			A2R10G10B10_UNORM_PACK32 = 58,
			A2R10G10B10_SNORM_PACK32 = 59,
			A2R10G10B10_USCALED_PACK32 = 60,
			A2R10G10B10_SSCALED_PACK32 = 61,
			A2R10G10B10_UINT_PACK32 = 62,
			A2R10G10B10_SINT_PACK32 = 63,
			A2B10G10R10_UNORM_PACK32 = 64,
			A2B10G10R10_SNORM_PACK32 = 65,
			A2B10G10R10_USCALED_PACK32 = 66,
			A2B10G10R10_SSCALED_PACK32 = 67,
			A2B10G10R10_UINT_PACK32 = 68,
			A2B10G10R10_SINT_PACK32 = 69,
			R16_UNORM = 70,
			R16_SNORM = 71,
			R16_USCALED = 72,
			R16_SSCALED = 73,
			R16_UINT = 74,
			R16_SINT = 75,
			R16_SFLOAT = 76,
			R16G16_UNORM = 77,
			R16G16_SNORM = 78,
			R16G16_USCALED = 79,
			R16G16_SSCALED = 80,
			R16G16_UINT = 81,
			R16G16_SINT = 82,
			R16G16_SFLOAT = 83,
			R16G16B16_UNORM = 84,
			R16G16B16_SNORM = 85,
			R16G16B16_USCALED = 86,
			R16G16B16_SSCALED = 87,
			R16G16B16_UINT = 88,
			R16G16B16_SINT = 89,
			R16G16B16_SFLOAT = 90,
			R16G16B16A16_UNORM = 91,
			R16G16B16A16_SNORM = 92,
			R16G16B16A16_USCALED = 93,
			R16G16B16A16_SSCALED = 94,
			R16G16B16A16_UINT = 95,
			R16G16B16A16_SINT = 96,
			R16G16B16A16_SFLOAT = 97,
			R32_UINT = 98,
			R32_SINT = 99,
			R32_SFLOAT = 100,
			R32G32_UINT = 101,
			R32G32_SINT = 102,
			R32G32_SFLOAT = 103,
			R32G32B32_UINT = 104,
			R32G32B32_SINT = 105,
			R32G32B32_SFLOAT = 106,
			R32G32B32A32_UINT = 107,
			R32G32B32A32_SINT = 108,
			R32G32B32A32_SFLOAT = 109,
			R64_UINT = 110,
			R64_SINT = 111,
			R64_SFLOAT = 112,
			R64G64_UINT = 113,
			R64G64_SINT = 114,
			R64G64_SFLOAT = 115,
			R64G64B64_UINT = 116,
			R64G64B64_SINT = 117,
			R64G64B64_SFLOAT = 118,
			R64G64B64A64_UINT = 119,
			R64G64B64A64_SINT = 120,
			R64G64B64A64_SFLOAT = 121,
			B10G11R11_UFLOAT_PACK32 = 122,
			E5B9G9R9_UFLOAT_PACK32 = 123,
			D16_UNORM = 124,
			X8_D24_UNORM_PACK32 = 125,
			D32_SFLOAT = 126,
			S8_UINT = 127,
			D16_UNORM_S8_UINT = 128,
			D24_UNORM_S8_UINT = 129,
			D32_SFLOAT_S8_UINT = 130,
			BC1_RGB_UNORM_BLOCK = 131,
			BC1_RGB_SRGB_BLOCK = 132,
			BC1_RGBA_UNORM_BLOCK = 133,
			BC1_RGBA_SRGB_BLOCK = 134,
			BC2_UNORM_BLOCK = 135,
			BC2_SRGB_BLOCK = 136,
			BC3_UNORM_BLOCK = 137,
			BC3_SRGB_BLOCK = 138,
			BC4_UNORM_BLOCK = 139,
			BC4_SNORM_BLOCK = 140,
			BC5_UNORM_BLOCK = 141,
			BC5_SNORM_BLOCK = 142,
			BC6H_UFLOAT_BLOCK = 143,
			BC6H_SFLOAT_BLOCK = 144,
			BC7_UNORM_BLOCK = 145,
			BC7_SRGB_BLOCK = 146,
			ETC2_R8G8B8_UNORM_BLOCK = 147,
			ETC2_R8G8B8_SRGB_BLOCK = 148,
			ETC2_R8G8B8A1_UNORM_BLOCK = 149,
			ETC2_R8G8B8A1_SRGB_BLOCK = 150,
			ETC2_R8G8B8A8_UNORM_BLOCK = 151,
			ETC2_R8G8B8A8_SRGB_BLOCK = 152,
			EAC_R11_UNORM_BLOCK = 153,
			EAC_R11_SNORM_BLOCK = 154,
			EAC_R11G11_UNORM_BLOCK = 155,
			EAC_R11G11_SNORM_BLOCK = 156,
			ASTC_4x4_UNORM_BLOCK = 157,
			ASTC_4x4_SRGB_BLOCK = 158,
			ASTC_5x4_UNORM_BLOCK = 159,
			ASTC_5x4_SRGB_BLOCK = 160,
			ASTC_5x5_UNORM_BLOCK = 161,
			ASTC_5x5_SRGB_BLOCK = 162,
			ASTC_6x5_UNORM_BLOCK = 163,
			ASTC_6x5_SRGB_BLOCK = 164,
			ASTC_6x6_UNORM_BLOCK = 165,
			ASTC_6x6_SRGB_BLOCK = 166,
			ASTC_8x5_UNORM_BLOCK = 167,
			ASTC_8x5_SRGB_BLOCK = 168,
			ASTC_8x6_UNORM_BLOCK = 169,
			ASTC_8x6_SRGB_BLOCK = 170,
			ASTC_8x8_UNORM_BLOCK = 171,
			ASTC_8x8_SRGB_BLOCK = 172,
			ASTC_10x5_UNORM_BLOCK = 173,
			ASTC_10x5_SRGB_BLOCK = 174,
			ASTC_10x6_UNORM_BLOCK = 175,
			ASTC_10x6_SRGB_BLOCK = 176,
			ASTC_10x8_UNORM_BLOCK = 177,
			ASTC_10x8_SRGB_BLOCK = 178,
			ASTC_10x10_UNORM_BLOCK = 179,
			ASTC_10x10_SRGB_BLOCK = 180,
			ASTC_12x10_UNORM_BLOCK = 181,
			ASTC_12x10_SRGB_BLOCK = 182,
			ASTC_12x12_UNORM_BLOCK = 183,
			ASTC_12x12_SRGB_BLOCK = 184,
		} 
		
		enum VkFormatFeatureFlagBits
		{
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,
			VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,
			VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
			VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
			VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
			VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
			VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,
			VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,
			VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
			VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
			VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,
			VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,
		} 
		alias VkFormatFeatureFlags = VkFlags; 
		
		struct VkFormatProperties
		{
			VkFormatFeatureFlags linearTilingFeatures; 
			VkFormatFeatureFlags optimalTilingFeatures; 
			VkFormatFeatureFlags bufferFeatures; 
		} 
		enum VkImageType
		{
			VK_IMAGE_TYPE_1D = 0,
			VK_IMAGE_TYPE_2D = 1,
			VK_IMAGE_TYPE_3D = 2,
		} 
		enum VkImageTiling
		{
			VK_IMAGE_TILING_OPTIMAL = 0,
			VK_IMAGE_TILING_LINEAR = 1,
		} 
		
		alias VkImageUsageFlagBits = VK_IMAGE_USAGE_; 
		enum VK_IMAGE_USAGE_
		{
			TRANSFER_SRC_BIT = 0x00000001,
			TRANSFER_DST_BIT = 0x00000002,
			SAMPLED_BIT = 0x00000004,
			STORAGE_BIT = 0x00000008,
			COLOR_ATTACHMENT_BIT = 0x00000010,
			DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
			TRANSIENT_ATTACHMENT_BIT = 0x00000040,
			INPUT_ATTACHMENT_BIT = 0x00000080,
		} 
		alias VkImageUsageFlags = VkBitFlags!VkImageUsageFlagBits; 
		enum VkImageCreateFlagBits
		{
			VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,
			VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
			VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
			VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,
			VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,
		} 
		alias VkImageCreateFlags = VkFlags; 
		struct VkExtent3D
		{
			uint32_t width; 
			uint32_t height; 
			uint32_t depth; 
		} 
		alias VkSampleCountFlagBits = VK_SAMPLE_COUNT; 
		enum VK_SAMPLE_COUNT
		{
			_1_BIT = 0x00000001,
			_2_BIT = 0x00000002,
			_4_BIT = 0x00000004,
			_8_BIT = 0x00000008,
			_16_BIT = 0x00000010,
			_32_BIT = 0x00000020,
			_64_BIT = 0x00000040,
		} 
		alias VkSampleCountFlags = VkBitFlags!VkSampleCountFlagBits; 
		alias VkDeviceSize = uint64_t; 
		struct VkImageFormatProperties
		{
			VkExtent3D maxExtent; 
			uint32_t maxMipLevels; 
			uint32_t maxArrayLayers; 
			VkSampleCountFlags sampleCounts; 
			VkDeviceSize maxResourceSize; 
		} 
		
		alias VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_; 
		enum VK_PHYSICAL_DEVICE_TYPE_
		{
			OTHER = 0,
			INTEGRATED_GPU = 1,
			DISCRETE_GPU = 2,
			VIRTUAL_GPU = 3,
			CPU = 4,
		} 
		struct VkPhysicalDeviceLimits
		{
			uint32_t maxImageDimension1D; 
			uint32_t maxImageDimension2D; 
			uint32_t maxImageDimension3D; 
			uint32_t maxImageDimensionCube; 
			uint32_t maxImageArrayLayers; 
			uint32_t maxTexelBufferElements; 
			uint32_t maxUniformBufferRange; 
			uint32_t maxStorageBufferRange; 
			uint32_t maxPushConstantsSize; 
			uint32_t maxMemoryAllocationCount; 
			uint32_t maxSamplerAllocationCount; 
			VkDeviceSize bufferImageGranularity; 
			VkDeviceSize sparseAddressSpaceSize; 
			uint32_t maxBoundDescriptorSets; 
			uint32_t maxPerStageDescriptorSamplers; 
			uint32_t maxPerStageDescriptorUniformBuffers; 
			uint32_t maxPerStageDescriptorStorageBuffers; 
			uint32_t maxPerStageDescriptorSampledImages; 
			uint32_t maxPerStageDescriptorStorageImages; 
			uint32_t maxPerStageDescriptorInputAttachments; 
			uint32_t maxPerStageResources; 
			uint32_t maxDescriptorSetSamplers; 
			uint32_t maxDescriptorSetUniformBuffers; 
			uint32_t maxDescriptorSetUniformBuffersDynamic; 
			uint32_t maxDescriptorSetStorageBuffers; 
			uint32_t maxDescriptorSetStorageBuffersDynamic; 
			uint32_t maxDescriptorSetSampledImages; 
			uint32_t maxDescriptorSetStorageImages; 
			uint32_t maxDescriptorSetInputAttachments; 
			uint32_t maxVertexInputAttributes; 
			uint32_t maxVertexInputBindings; 
			uint32_t maxVertexInputAttributeOffset; 
			uint32_t maxVertexInputBindingStride; 
			uint32_t maxVertexOutputComponents; 
			uint32_t maxTessellationGenerationLevel; 
			uint32_t maxTessellationPatchSize; 
			uint32_t maxTessellationControlPerVertexInputComponents; 
			uint32_t maxTessellationControlPerVertexOutputComponents; 
			uint32_t maxTessellationControlPerPatchOutputComponents; 
			uint32_t maxTessellationControlTotalOutputComponents; 
			uint32_t maxTessellationEvaluationInputComponents; 
			uint32_t maxTessellationEvaluationOutputComponents; 
			uint32_t maxGeometryShaderInvocations; 
			uint32_t maxGeometryInputComponents; 
			uint32_t maxGeometryOutputComponents; 
			uint32_t maxGeometryOutputVertices; 
			uint32_t maxGeometryTotalOutputComponents; 
			uint32_t maxFragmentInputComponents; 
			uint32_t maxFragmentOutputAttachments; 
			uint32_t maxFragmentDualSrcAttachments; 
			uint32_t maxFragmentCombinedOutputResources; 
			uint32_t maxComputeSharedMemorySize; 
			uint32_t[3] maxComputeWorkGroupCount; 
			uint32_t maxComputeWorkGroupInvocations; 
			uint32_t[3] maxComputeWorkGroupSize; 
			uint32_t subPixelPrecisionBits; 
			uint32_t subTexelPrecisionBits; 
			uint32_t mipmapPrecisionBits; 
			uint32_t maxDrawIndexedIndexValue; 
			uint32_t maxDrawIndirectCount; 
			float maxSamplerLodBias; 
			float maxSamplerAnisotropy; 
			uint32_t maxViewports; 
			uint32_t[2] maxViewportDimensions; 
			float[2] viewportBoundsRange; 
			uint32_t viewportSubPixelBits; 
			size_t minMemoryMapAlignment; 
			VkDeviceSize minTexelBufferOffsetAlignment; 
			VkDeviceSize minUniformBufferOffsetAlignment; 
			VkDeviceSize minStorageBufferOffsetAlignment; 
			int32_t minTexelOffset; 
			uint32_t maxTexelOffset; 
			int32_t minTexelGatherOffset; 
			uint32_t maxTexelGatherOffset; 
			float minInterpolationOffset; 
			float maxInterpolationOffset; 
			uint32_t subPixelInterpolationOffsetBits; 
			uint32_t maxFramebufferWidth; 
			uint32_t maxFramebufferHeight; 
			uint32_t maxFramebufferLayers; 
			VkSampleCountFlags framebufferColorSampleCounts; 
			VkSampleCountFlags framebufferDepthSampleCounts; 
			VkSampleCountFlags framebufferStencilSampleCounts; 
			VkSampleCountFlags framebufferNoAttachmentsSampleCounts; 
			uint32_t maxColorAttachments; 
			VkSampleCountFlags sampledImageColorSampleCounts; 
			VkSampleCountFlags sampledImageIntegerSampleCounts; 
			VkSampleCountFlags sampledImageDepthSampleCounts; 
			VkSampleCountFlags sampledImageStencilSampleCounts; 
			VkSampleCountFlags storageImageSampleCounts; 
			uint32_t maxSampleMaskWords; 
			VkBool32 timestampComputeAndGraphics; 
			float timestampPeriod; 
			uint32_t maxClipDistances; 
			uint32_t maxCullDistances; 
			uint32_t maxCombinedClipAndCullDistances; 
			uint32_t discreteQueuePriorities; 
			float[2] pointSizeRange; 
			float[2] lineWidthRange; 
			float pointSizeGranularity; 
			float lineWidthGranularity; 
			VkBool32 strictLines; 
			VkBool32 standardSampleLocations; 
			VkDeviceSize optimalBufferCopyOffsetAlignment; 
			VkDeviceSize optimalBufferCopyRowPitchAlignment; 
			VkDeviceSize nonCoherentAtomSize; 
		} 
		struct VkPhysicalDeviceSparseProperties
		{
			VkBool32 residencyStandard2DBlockShape; 
			VkBool32 residencyStandard2DMultisampleBlockShape; 
			VkBool32 residencyStandard3DBlockShape; 
			VkBool32 residencyAlignedMipSize; 
			VkBool32 residencyNonResidentStrict; 
		} 
		
		enum VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256; 
		enum VK_UUID_SIZE = 16; 
		struct VkPhysicalDeviceProperties
		{
			uint32_t apiVersion; 
			uint32_t driverVersion; 
			uint32_t vendorID; 
			uint32_t deviceID; 
			VkPhysicalDeviceType deviceType; 
			char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] deviceName; 
			uint8_t[VK_UUID_SIZE] pipelineCacheUUID; 
			VkPhysicalDeviceLimits limits; 
			VkPhysicalDeviceSparseProperties sparseProperties; 
		} 
		
		enum VK_QUEUE_
		{
			GRAPHICS_BIT = 0x00000001,
			COMPUTE_BIT = 0x00000002,
			TRANSFER_BIT = 0x00000004,
			SPARSE_BINDING_BIT = 0x00000008,
		} 
		alias VkQueueFlags = VkBitFlags!VK_QUEUE_; 
		
		struct VkQueueFamilyProperties
		{
			VkQueueFlags queueFlags; 
			uint32_t queueCount; 
			uint32_t timestampValidBits; 
			VkExtent3D minImageTransferGranularity; 
		} 
		
		alias VkMemoryPropertyFlagBits = VK_MEMORY_PROPERTY_; 
		enum VK_MEMORY_PROPERTY_
		{
			DEVICE_LOCAL_BIT = 0x00000001,
			HOST_VISIBLE_BIT = 0x00000002,
			HOST_COHERENT_BIT = 0x00000004,
			HOST_CACHED_BIT = 0x00000008,
			LAZILY_ALLOCATED_BIT = 0x00000010,
		} 
		alias VkMemoryPropertyFlags = VkBitFlags!VkMemoryPropertyFlagBits; 
		
		struct VkMemoryType
		{
			VkMemoryPropertyFlags propertyFlags; 
			uint32_t heapIndex; 
		} 
		
		alias VkMemoryHeapFlagBits =  VK_MEMORY_HEAP_; 
		enum VK_MEMORY_HEAP_
		{DEVICE_LOCAL_BIT = 0x00000001, } 
		alias VkMemoryHeapFlags = VkBitFlags!VkMemoryHeapFlagBits; 
		
		struct VkMemoryHeap
		{
			VkDeviceSize size; 
			VkMemoryHeapFlags flags; 
		} 
		
		enum VK_MAX_MEMORY_TYPES = 32; 
		enum VK_MAX_MEMORY_HEAPS = 16; 
		struct VkPhysicalDeviceMemoryProperties
		{
			uint32_t memoryTypeCount; 
			VkMemoryType[VK_MAX_MEMORY_TYPES] memoryTypes; 
			uint32_t memoryHeapCount; 
			VkMemoryHeap[VK_MAX_MEMORY_HEAPS] memoryHeaps; 
		} 
		alias PFN_vkVoidFunction = void function(); 
		mixin(VK_DEFINE_HANDLE!q{VkDevice}); 
		alias VkDeviceCreateFlags = VkFlags; 
		alias VkDeviceQueueCreateFlags = VkFlags; 
		struct VkDeviceQueueCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DEVICE_QUEUE_CREATE_INFO; 
			const(void)* pNext; 
			VkDeviceQueueCreateFlags flags; 
			uint32_t queueFamilyIndex; 
			uint32_t queueCount; 
			const(float)* pQueuePriorities; 
		} 
		struct VkDeviceCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DEVICE_CREATE_INFO; 
			const(void)* pNext; 
			VkDeviceCreateFlags flags; 
			uint32_t queueCreateInfoCount; 
			const(VkDeviceQueueCreateInfo)* pQueueCreateInfos; 
			uint32_t enabledLayerCount; 
			const(char*)* ppEnabledLayerNames; 
			uint32_t enabledExtensionCount; 
			const(char*)* ppEnabledExtensionNames; 
			const(VkPhysicalDeviceFeatures)* pEnabledFeatures; 
		} 
		
		enum VK_MAX_EXTENSION_NAME_SIZE = 256; 
		struct VkExtensionProperties
		{
			char[VK_MAX_EXTENSION_NAME_SIZE] extensionName; 
			uint32_t specVersion; 
		} 
		
		enum VK_MAX_DESCRIPTION_SIZE = 256; 
		struct VkLayerProperties
		{
			char[VK_MAX_EXTENSION_NAME_SIZE] layerName; 
			uint32_t specVersion; 
			uint32_t implementationVersion; 
			char[VK_MAX_DESCRIPTION_SIZE] description; 
		} 
		
		mixin(VK_DEFINE_HANDLE!q{VkQueue}); 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkSemaphore}); 
		
		alias VkPipelineStageFlagBits = VK_PIPELINE_STAGE_; 
		enum VK_PIPELINE_STAGE_
		{
			TOP_OF_PIPE_BIT = 0x00000001,
			DRAW_INDIRECT_BIT = 0x00000002,
			VERTEX_INPUT_BIT = 0x00000004,
			VERTEX_SHADER_BIT = 0x00000008,
			TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
			TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
			GEOMETRY_SHADER_BIT = 0x00000040,
			FRAGMENT_SHADER_BIT = 0x00000080,
			EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
			LATE_FRAGMENT_TESTS_BIT = 0x00000200,
			COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
			COMPUTE_SHADER_BIT = 0x00000800,
			TRANSFER_BIT = 0x00001000,
			BOTTOM_OF_PIPE_BIT = 0x00002000,
			HOST_BIT = 0x00004000,
			ALL_GRAPHICS_BIT = 0x00008000,
			ALL_COMMANDS_BIT = 0x00010000,
		} 
		alias VkPipelineStageFlags = VkBitFlags!VkPipelineStageFlagBits; 
		
		mixin(VK_DEFINE_HANDLE!q{VkCommandBuffer}); 
		struct VkSubmitInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.SUBMIT_INFO; 
			const(void)* pNext; 
			uint32_t waitSemaphoreCount; 
			const(VkSemaphore)* pWaitSemaphores; 
			const(VkPipelineStageFlags)* pWaitDstStageMask; 
			uint32_t commandBufferCount; 
			const(VkCommandBuffer)* pCommandBuffers; 
			uint32_t signalSemaphoreCount; 
			const(VkSemaphore)* pSignalSemaphores; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkFence}); 
		struct VkMemoryAllocateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.MEMORY_ALLOCATE_INFO; 
			const(void)* pNext; 
			VkDeviceSize allocationSize; 
			uint32_t memoryTypeIndex; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkDeviceMemory}); 
		alias VkMemoryMapFlags = VkFlags; 
		struct VkMappedMemoryRange
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.MAPPED_MEMORY_RANGE; 
			const(void)* pNext; 
			VkDeviceMemory memory; 
			VkDeviceSize offset; 
			VkDeviceSize size; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkBuffer}); 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkImage}); 
		struct VkMemoryRequirements
		{
			VkDeviceSize size; 
			VkDeviceSize alignment; 
			uint32_t memoryTypeBits; 
		} 
		
		alias VkImageAspectFlagBits = VK_IMAGE_ASPECT_; 
		enum VK_IMAGE_ASPECT_
		{
			COLOR_BIT = 0x00000001,
			DEPTH_BIT = 0x00000002,
			STENCIL_BIT = 0x00000004,
			METADATA_BIT = 0x00000008,
		} 
		
		alias VkImageAspectFlags = VkFlags; 
		enum VkSparseImageFormatFlagBits
		{
			VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,
			VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,
			VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
		} 
		alias VkSparseImageFormatFlags = VkFlags; 
		struct VkSparseImageFormatProperties
		{
			VkImageAspectFlags aspectMask; 
			VkExtent3D imageGranularity; 
			VkSparseImageFormatFlags flags; 
		} 
		struct VkSparseImageMemoryRequirements
		{
			VkSparseImageFormatProperties formatProperties; 
			uint32_t imageMipTailFirstLod; 
			VkDeviceSize imageMipTailSize; 
			VkDeviceSize imageMipTailOffset; 
			VkDeviceSize imageMipTailStride; 
		} 
		enum VkSparseMemoryBindFlagBits
		{ VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001, } 
		alias VkSparseMemoryBindFlags = VkFlags; 
		struct VkSparseMemoryBind
		{
			VkDeviceSize resourceOffset; 
			VkDeviceSize size; 
			VkDeviceMemory memory; 
			VkDeviceSize memoryOffset; 
			VkSparseMemoryBindFlags flags; 
		} 
		struct VkSparseBufferMemoryBindInfo
		{
			VkBuffer buffer; 
			uint32_t bindCount; 
			const(VkSparseMemoryBind)* pBinds; 
		} 
		struct VkSparseImageOpaqueMemoryBindInfo
		{
			VkImage image; 
			uint32_t bindCount; 
			const(VkSparseMemoryBind)* pBinds; 
		} 
		struct VkImageSubresource
		{
			VkImageAspectFlags aspectMask; 
			uint32_t mipLevel; 
			uint32_t arrayLayer; 
		} 
		struct VkOffset3D
		{
			int32_t x; 
			int32_t y; 
			int32_t z; 
		} 
		struct VkSparseImageMemoryBind
		{
			VkImageSubresource subresource; 
			VkOffset3D offset; 
			VkExtent3D extent; 
			VkDeviceMemory memory; 
			VkDeviceSize memoryOffset; 
			VkSparseMemoryBindFlags flags; 
		} 
		struct VkSparseImageMemoryBindInfo
		{
			VkImage image; 
			uint32_t bindCount; 
			const(VkSparseImageMemoryBind)* pBinds; 
		} 
		struct VkBindSparseInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.BIND_SPARSE_INFO; 
			const(void)* pNext; 
			uint32_t waitSemaphoreCount; 
			const(VkSemaphore)* pWaitSemaphores; 
			uint32_t bufferBindCount; 
			const(VkSparseBufferMemoryBindInfo)* pBufferBinds; 
			uint32_t imageOpaqueBindCount; 
			const(VkSparseImageOpaqueMemoryBindInfo)* pImageOpaqueBinds; 
			uint32_t imageBindCount; 
			const(VkSparseImageMemoryBindInfo)* pImageBinds; 
			uint32_t signalSemaphoreCount; 
			const(VkSemaphore)* pSignalSemaphores; 
		} 
		enum VkFenceCreateFlagBits
		{ VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001, } 
		alias VkFenceCreateFlags = VkFlags; 
		struct VkFenceCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.FENCE_CREATE_INFO; 
			const(void)* pNext; 
			VkFenceCreateFlags flags; 
		} 
		alias VkSemaphoreCreateFlags = VkFlags; 
		struct VkSemaphoreCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.SEMAPHORE_CREATE_INFO; 
			const(void)* pNext; 
			VkSemaphoreCreateFlags flags; 
		} 
		alias VkEventCreateFlags = VkFlags; 
		struct VkEventCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.EVENT_CREATE_INFO; 
			const(void)* pNext; 
			VkEventCreateFlags flags; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkEvent}); 
		alias VkQueryPoolCreateFlags = VkFlags; 
		enum VkQueryType
		{
			VK_QUERY_TYPE_OCCLUSION = 0,
			VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
			VK_QUERY_TYPE_TIMESTAMP = 2,
		} 
		enum VkQueryPipelineStatisticFlagBits
		{
			VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
			VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
			VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
			VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
			VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
			VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,
			VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,
			VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
			VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
			VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
			VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
		} 
		alias VkQueryPipelineStatisticFlags = VkFlags; 
		struct VkQueryPoolCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.QUERY_POOL_CREATE_INFO; 
			const(void)* pNext; 
			VkQueryPoolCreateFlags flags; 
			VkQueryType queryType; 
			uint32_t queryCount; 
			VkQueryPipelineStatisticFlags pipelineStatistics; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkQueryPool}); 
		enum VkQueryResultFlagBits
		{
			VK_QUERY_RESULT_64_BIT = 0x00000001,
			VK_QUERY_RESULT_WAIT_BIT = 0x00000002,
			VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
			VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008,
		} 
		alias VkQueryResultFlags = VkFlags; 
		enum VkBufferCreateFlagBits
		{
			VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,
			VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
			VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
		} 
		alias VkBufferCreateFlags = VkFlags; 
		alias VkBufferUsageFlagBits = VK_BUFFER_USAGE_; 
		enum VK_BUFFER_USAGE_
		{
			TRANSFER_SRC_BIT = 0x00000001,
			TRANSFER_DST_BIT = 0x00000002,
			UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
			STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
			UNIFORM_BUFFER_BIT = 0x00000010,
			STORAGE_BUFFER_BIT = 0x00000020,
			INDEX_BUFFER_BIT = 0x00000040,
			VERTEX_BUFFER_BIT = 0x00000080,
			INDIRECT_BUFFER_BIT = 0x00000100,
		} 
		alias VkBufferUsageFlags = VkBitFlags!VkBufferUsageFlagBits; 
		alias VkSharingMode = VK_SHARING_MODE_; 
		enum VK_SHARING_MODE_
		{
			EXCLUSIVE = 0,
			CONCURRENT = 1,
		} 
		struct VkBufferCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.BUFFER_CREATE_INFO; 
			const(void)* pNext; 
			VkBufferCreateFlags flags; 
			VkDeviceSize size; 
			VkBufferUsageFlags usage; 
			VkSharingMode sharingMode; 
			uint32_t queueFamilyIndexCount; 
			const(uint32_t)* pQueueFamilyIndices; 
		} 
		alias VkBufferViewCreateFlags = VkFlags; 
		struct VkBufferViewCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.BUFFER_VIEW_CREATE_INFO; 
			const(void)* pNext; 
			VkBufferViewCreateFlags flags; 
			VkBuffer buffer; 
			VkFormat format; 
			VkDeviceSize offset; 
			VkDeviceSize range; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkBufferView}); 
		
		alias VkImageLayout = VK_IMAGE_LAYOUT_; 
		enum VK_IMAGE_LAYOUT_
		{
			UNDEFINED = 0,
			GENERAL = 1,
			COLOR_ATTACHMENT_OPTIMAL = 2,
			DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
			DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
			SHADER_READ_ONLY_OPTIMAL = 5,
			TRANSFER_SRC_OPTIMAL = 6,
			TRANSFER_DST_OPTIMAL = 7,
			PREINITIALIZED = 8,
			PRESENT_SRC_KHR = 1000001002,
		} 
		
		struct VkImageCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.IMAGE_CREATE_INFO; 
			const(void)* pNext; 
			VkImageCreateFlags flags; 
			VkImageType imageType; 
			VkFormat format; 
			VkExtent3D extent; 
			uint32_t mipLevels; 
			uint32_t arrayLayers; 
			VkSampleCountFlagBits samples; 
			VkImageTiling tiling; 
			VkImageUsageFlags usage; 
			VkSharingMode sharingMode; 
			uint32_t queueFamilyIndexCount; 
			const(uint32_t)* pQueueFamilyIndices; 
			VkImageLayout initialLayout; 
		} 
		struct VkSubresourceLayout
		{
			VkDeviceSize offset; 
			VkDeviceSize size; 
			VkDeviceSize rowPitch; 
			VkDeviceSize arrayPitch; 
			VkDeviceSize depthPitch; 
		} 
		alias VkImageViewCreateFlags = VkFlags; 
		
		alias VkImageViewType = VK_IMAGE_VIEW_TYPE; 
		enum VK_IMAGE_VIEW_TYPE
		{
			_1D = 0,
			_2D = 1,
			_3D = 2,
			_CUBE = 3,
			_1D_ARRAY = 4,
			_2D_ARRAY = 5,
			_CUBE_ARRAY = 6,
		} 
		
		alias VkComponentSwizzle = VK_COMPONENT_SWIZZLE_; 
		enum VK_COMPONENT_SWIZZLE_
		{
			IDENTITY = 0,
			ZERO = 1,
			ONE = 2,
			R = 3,
			G = 4,
			B = 5,
			A = 6,
		} 
		
		struct VkComponentMapping
		{
			VkComponentSwizzle r; 
			VkComponentSwizzle g; 
			VkComponentSwizzle b; 
			VkComponentSwizzle a; 
		} 
		struct VkImageSubresourceRange
		{
			VkImageAspectFlags aspectMask; 
			uint32_t baseMipLevel; 
			uint32_t levelCount; 
			uint32_t baseArrayLayer; 
			uint32_t layerCount; 
		} 
		struct VkImageViewCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.IMAGE_VIEW_CREATE_INFO; 
			const(void)* pNext; 
			VkImageViewCreateFlags flags; 
			VkImage image; 
			VkImageViewType viewType; 
			VkFormat format; 
			VkComponentMapping components; 
			VkImageSubresourceRange subresourceRange; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkImageView}); 
		alias VkShaderModuleCreateFlags = VkFlags; 
		struct VkShaderModuleCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.SHADER_MODULE_CREATE_INFO; 
			const(void)* pNext; 
			VkShaderModuleCreateFlags flags; 
			size_t codeSize; 
			const(uint32_t)* pCode; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkShaderModule}); 
		alias VkPipelineCacheCreateFlags = VkFlags; 
		struct VkPipelineCacheCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_CACHE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineCacheCreateFlags flags; 
			size_t initialDataSize; 
			const(void)* pInitialData; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkPipelineCache}); 
		enum VkPipelineCreateFlagBits
		{
			VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,
			VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,
			VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,
		} 
		alias VkPipelineCreateFlags = VkFlags; 
		alias VkPipelineShaderStageCreateFlags = VkFlags; 
		
		alias VkShaderStageFlagBits = VK_SHADER_STAGE_; 
		enum VK_SHADER_STAGE_
		{
			VERTEX_BIT = 0x00000001,
			TESSELLATION_CONTROL_BIT = 0x00000002,
			TESSELLATION_EVALUATION_BIT = 0x00000004,
			GEOMETRY_BIT = 0x00000008,
			FRAGMENT_BIT = 0x00000010,
			COMPUTE_BIT = 0x00000020,
			ALL_GRAPHICS = 0x0000001F,
			ALL = 0x7FFFFFFF,
		} 
		alias VkShaderStageFlags = VkBitFlags!(VkShaderStageFlagBits, Yes.unsafe); 
		
		struct VkSpecializationMapEntry
		{
			uint32_t constantID; 
			uint32_t offset; 
			size_t size; 
		} 
		struct VkSpecializationInfo
		{
			uint32_t mapEntryCount; 
			const(VkSpecializationMapEntry)* pMapEntries; 
			size_t dataSize; 
			const(void)* pData; 
		} 
		struct VkPipelineShaderStageCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_SHADER_STAGE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineShaderStageCreateFlags flags; 
			VkShaderStageFlagBits stage; 
			VkShaderModule _module; 
			const(char)* pName; 
			const(VkSpecializationInfo)* pSpecializationInfo; 
		} 
		alias VkPipelineVertexInputStateCreateFlags = VkFlags; 
		alias VkVertexInputRate = VK_VERTEX_INPUT_RATE_; 
		enum VK_VERTEX_INPUT_RATE_
		{
			VERTEX = 0,
			INSTANCE = 1,
		} 
		struct VkVertexInputBindingDescription
		{
			uint32_t binding; 
			uint32_t stride; 
			VkVertexInputRate inputRate; 
		} 
		struct VkVertexInputAttributeDescription
		{
			uint32_t location; 
			uint32_t binding; 
			VkFormat format; 
			uint32_t offset; 
		} 
		struct VkPipelineVertexInputStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineVertexInputStateCreateFlags flags; 
			uint32_t vertexBindingDescriptionCount; 
			const(VkVertexInputBindingDescription)* pVertexBindingDescriptions; 
			uint32_t vertexAttributeDescriptionCount; 
			const(VkVertexInputAttributeDescription)* pVertexAttributeDescriptions; 
		} 
		alias VkPipelineInputAssemblyStateCreateFlags = VkFlags; 
		
		alias VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_; 
		enum VK_PRIMITIVE_TOPOLOGY_
		{
			POINT_LIST = 0,
			LINE_LIST = 1,
			LINE_STRIP = 2,
			TRIANGLE_LIST = 3,
			TRIANGLE_STRIP = 4,
			TRIANGLE_FAN = 5,
			LINE_LIST_WITH_ADJACENCY = 6,
			LINE_STRIP_WITH_ADJACENCY = 7,
			TRIANGLE_LIST_WITH_ADJACENCY = 8,
			TRIANGLE_STRIP_WITH_ADJACENCY = 9,
			PATCH_LIST = 10,
		} 
		
		struct VkPipelineInputAssemblyStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineInputAssemblyStateCreateFlags flags; 
			VkPrimitiveTopology topology; 
			VkBool32 primitiveRestartEnable; 
		} 
		alias VkPipelineTessellationStateCreateFlags = VkFlags; 
		struct VkPipelineTessellationStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_TESSELLATION_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineTessellationStateCreateFlags flags; 
			uint32_t patchControlPoints; 
		} 
		alias VkPipelineViewportStateCreateFlags = VkFlags; 
		struct VkViewport
		{
			float x; 
			float y; 
			float width; 
			float height; 
			float minDepth; 
			float maxDepth; 
		} 
		struct VkOffset2D
		{
			int32_t x; 
			int32_t y; 
		} 
		struct VkExtent2D
		{
			uint32_t width; 
			uint32_t height; 
		} 
		struct VkRect2D
		{
			VkOffset2D offset; 
			VkExtent2D extent; 
		} 
		struct VkPipelineViewportStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_VIEWPORT_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineViewportStateCreateFlags flags; 
			uint32_t viewportCount; 
			const(VkViewport)* pViewports; 
			uint32_t scissorCount; 
			const(VkRect2D)* pScissors; 
		} 
		alias VkPipelineRasterizationStateCreateFlags = VkFlags; 
		
		alias VkPolygonMode = VK_POLYGON_MODE_; 
		enum VK_POLYGON_MODE_
		{
			FILL = 0,
			LINE = 1,
			POINT = 2,
		} 
		
		alias VkCullModeFlagBits = VK_CULL_MODE_; 
		enum VK_CULL_MODE_
		{
			NONE = 0,
			FRONT_BIT = 0x00000001,
			BACK_BIT = 0x00000002,
			FRONT_AND_BACK = 0x00000003,
		} 
		alias VkCullModeFlags = VkBitFlags!(VkCullModeFlagBits, Yes.unsafe); 
		
		alias VkFrontFace = VK_FRONT_FACE_; 
		enum VK_FRONT_FACE_
		{
			COUNTER_CLOCKWISE = 0,
			CLOCKWISE = 1,
		} 
		
		struct VkPipelineRasterizationStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_RASTERIZATION_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineRasterizationStateCreateFlags flags; 
			VkBool32 depthClampEnable; 
			VkBool32 rasterizerDiscardEnable; 
			VkPolygonMode polygonMode; 
			VkCullModeFlags cullMode; 
			VkFrontFace frontFace; 
			VkBool32 depthBiasEnable; 
			float depthBiasConstantFactor; 
			float depthBiasClamp; 
			float depthBiasSlopeFactor; 
			float lineWidth; 
		} 
		alias VkPipelineMultisampleStateCreateFlags = VkFlags; 
		alias VkSampleMask = uint32_t; 
		struct VkPipelineMultisampleStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_MULTISAMPLE_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineMultisampleStateCreateFlags flags; 
			VkSampleCountFlagBits rasterizationSamples; 
			VkBool32 sampleShadingEnable; 
			float minSampleShading; 
			const(VkSampleMask)* pSampleMask; 
			VkBool32 alphaToCoverageEnable; 
			VkBool32 alphaToOneEnable; 
		} 
		alias VkPipelineDepthStencilStateCreateFlags = VkFlags; 
		enum VkCompareOp
		{
			VK_COMPARE_OP_NEVER = 0,
			VK_COMPARE_OP_LESS = 1,
			VK_COMPARE_OP_EQUAL = 2,
			VK_COMPARE_OP_LESS_OR_EQUAL = 3,
			VK_COMPARE_OP_GREATER = 4,
			VK_COMPARE_OP_NOT_EQUAL = 5,
			VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
			VK_COMPARE_OP_ALWAYS = 7,
		} 
		enum VkStencilOp
		{
			VK_STENCIL_OP_KEEP = 0,
			VK_STENCIL_OP_ZERO = 1,
			VK_STENCIL_OP_REPLACE = 2,
			VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
			VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
			VK_STENCIL_OP_INVERT = 5,
			VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
			VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
		} 
		struct VkStencilOpState
		{
			VkStencilOp failOp; 
			VkStencilOp passOp; 
			VkStencilOp depthFailOp; 
			VkCompareOp compareOp; 
			uint32_t compareMask; 
			uint32_t writeMask; 
			uint32_t reference; 
		} 
		struct VkPipelineDepthStencilStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineDepthStencilStateCreateFlags flags; 
			VkBool32 depthTestEnable; 
			VkBool32 depthWriteEnable; 
			VkCompareOp depthCompareOp; 
			VkBool32 depthBoundsTestEnable; 
			VkBool32 stencilTestEnable; 
			VkStencilOpState front; 
			VkStencilOpState back; 
			float minDepthBounds; 
			float maxDepthBounds; 
		} 
		alias VkPipelineColorBlendStateCreateFlags = VkFlags; 
		
		alias VkLogicOp = VK_LOGIC_OP_; 
		enum VK_LOGIC_OP_
		{
			CLEAR = 0,
			AND = 1,
			AND_REVERSE = 2,
			COPY = 3,
			AND_INVERTED = 4,
			NO_OP = 5,
			XOR = 6,
			OR = 7,
			NOR = 8,
			EQUIVALENT = 9,
			INVERT = 10,
			OR_REVERSE = 11,
			COPY_INVERTED = 12,
			OR_INVERTED = 13,
			NAND = 14,
			SET = 15,
		} 
		
		alias VkBlendFactor = VK_BLEND_FACTOR_; 
		enum VK_BLEND_FACTOR_
		{
			ZERO = 0,
			ONE = 1,
			SRC_COLOR = 2,
			ONE_MINUS_SRC_COLOR = 3,
			DST_COLOR = 4,
			ONE_MINUS_DST_COLOR = 5,
			SRC_ALPHA = 6,
			ONE_MINUS_SRC_ALPHA = 7,
			DST_ALPHA = 8,
			ONE_MINUS_DST_ALPHA = 9,
			CONSTANT_COLOR = 10,
			ONE_MINUS_CONSTANT_COLOR = 11,
			CONSTANT_ALPHA = 12,
			ONE_MINUS_CONSTANT_ALPHA = 13,
			SRC_ALPHA_SATURATE = 14,
			SRC1_COLOR = 15,
			ONE_MINUS_SRC1_COLOR = 16,
			SRC1_ALPHA = 17,
			ONE_MINUS_SRC1_ALPHA = 18,
		} 
		
		alias VkBlendOp = VK_BLEND_OP_; 
		enum VK_BLEND_OP_
		{
			ADD = 0,
			SUBTRACT = 1,
			REVERSE_SUBTRACT = 2,
			MIN = 3,
			MAX = 4,
		} 
		
		alias VkColorComponentFlagBits = VK_COLOR_COMPONENT_; 
		enum VK_COLOR_COMPONENT_
		{
			R_BIT = 0x00000001,
			G_BIT = 0x00000002,
			B_BIT = 0x00000004,
			A_BIT = 0x00000008,
		} 
		alias VkColorComponentFlags = VkBitFlags!VkColorComponentFlagBits; 
		
		struct VkPipelineColorBlendAttachmentState
		{
			VkBool32 blendEnable; 
			VkBlendFactor srcColorBlendFactor; 
			VkBlendFactor dstColorBlendFactor; 
			VkBlendOp colorBlendOp; 
			VkBlendFactor srcAlphaBlendFactor; 
			VkBlendFactor dstAlphaBlendFactor; 
			VkBlendOp alphaBlendOp; 
			VkColorComponentFlags colorWriteMask; 
		} 
		struct VkPipelineColorBlendStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_COLOR_BLEND_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineColorBlendStateCreateFlags flags; 
			VkBool32 logicOpEnable; 
			VkLogicOp logicOp; 
			uint32_t attachmentCount; 
			const(VkPipelineColorBlendAttachmentState)* pAttachments; 
			float[4] blendConstants; 
		} 
		alias VkPipelineDynamicStateCreateFlags = VkFlags; 
		enum VkDynamicState
		{
			VK_DYNAMIC_STATE_VIEWPORT = 0,
			VK_DYNAMIC_STATE_SCISSOR = 1,
			VK_DYNAMIC_STATE_LINE_WIDTH = 2,
			VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
			VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
			VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
			VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
			VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
			VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
		} 
		struct VkPipelineDynamicStateCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_DYNAMIC_STATE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineDynamicStateCreateFlags flags; 
			uint32_t dynamicStateCount; 
			const(VkDynamicState)* pDynamicStates; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkPipelineLayout}); 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkRenderPass}); 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkPipeline}); 
		struct VkGraphicsPipelineCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.GRAPHICS_PIPELINE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineCreateFlags flags; 
			uint32_t stageCount; 
			const(VkPipelineShaderStageCreateInfo)* pStages; 
			const(VkPipelineVertexInputStateCreateInfo)* pVertexInputState; 
			const(VkPipelineInputAssemblyStateCreateInfo)* pInputAssemblyState; 
			const(VkPipelineTessellationStateCreateInfo)* pTessellationState; 
			const(VkPipelineViewportStateCreateInfo)* pViewportState; 
			const(VkPipelineRasterizationStateCreateInfo)* pRasterizationState; 
			const(VkPipelineMultisampleStateCreateInfo)* pMultisampleState; 
			const(VkPipelineDepthStencilStateCreateInfo)* pDepthStencilState; 
			const(VkPipelineColorBlendStateCreateInfo)* pColorBlendState; 
			const(VkPipelineDynamicStateCreateInfo)* pDynamicState; 
			VkPipelineLayout layout; 
			VkRenderPass renderPass; 
			uint32_t subpass; 
			VkPipeline basePipelineHandle; 
			int32_t basePipelineIndex; 
		} 
		struct VkComputePipelineCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.COMPUTE_PIPELINE_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineCreateFlags flags; 
			VkPipelineShaderStageCreateInfo stage; 
			VkPipelineLayout layout; 
			VkPipeline basePipelineHandle; 
			int32_t basePipelineIndex; 
		} 
		alias VkPipelineLayoutCreateFlags = VkFlags; 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkDescriptorSetLayout}); 
		struct VkPushConstantRange
		{
			VkShaderStageFlags stageFlags; 
			uint32_t offset; 
			uint32_t size; 
		} 
		struct VkPipelineLayoutCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_LAYOUT_CREATE_INFO; 
			const(void)* pNext; 
			VkPipelineLayoutCreateFlags flags; 
			uint32_t setLayoutCount; 
			const(VkDescriptorSetLayout)* pSetLayouts; 
			uint32_t pushConstantRangeCount; 
			const(VkPushConstantRange)* pPushConstantRanges; 
		} 
		alias VkSamplerCreateFlags = VkFlags; 
		enum VkFilter
		{
			VK_FILTER_NEAREST = 0,
			VK_FILTER_LINEAR = 1,
			VK_FILTER_CUBIC_IMG = 1000015000,
		} 
		enum VkSamplerMipmapMode
		{
			VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
			VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
		} 
		enum VkSamplerAddressMode
		{
			VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
			VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
			VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
			VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
			VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
		} 
		enum VkBorderColor
		{
			VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
			VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
			VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
			VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
			VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
			VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
		} 
		struct VkSamplerCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.SAMPLER_CREATE_INFO; 
			const(void)* pNext; 
			VkSamplerCreateFlags flags; 
			VkFilter magFilter; 
			VkFilter minFilter; 
			VkSamplerMipmapMode mipmapMode; 
			VkSamplerAddressMode addressModeU; 
			VkSamplerAddressMode addressModeV; 
			VkSamplerAddressMode addressModeW; 
			float mipLodBias; 
			VkBool32 anisotropyEnable; 
			float maxAnisotropy; 
			VkBool32 compareEnable; 
			VkCompareOp compareOp; 
			float minLod; 
			float maxLod; 
			VkBorderColor borderColor; 
			VkBool32 unnormalizedCoordinates; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkSampler}); 
		alias VkDescriptorSetLayoutCreateFlags = VkFlags; 
		alias VkDescriptorType = VK_DESCRIPTOR_TYPE_; 
		enum VK_DESCRIPTOR_TYPE_
		{
			SAMPLER = 0,
			COMBINED_IMAGE_SAMPLER = 1,
			SAMPLED_IMAGE = 2,
			STORAGE_IMAGE = 3,
			UNIFORM_TEXEL_BUFFER = 4,
			STORAGE_TEXEL_BUFFER = 5,
			UNIFORM_BUFFER = 6,
			STORAGE_BUFFER = 7,
			UNIFORM_BUFFER_DYNAMIC = 8,
			STORAGE_BUFFER_DYNAMIC = 9,
			INPUT_ATTACHMENT = 10,
		} 
		
		struct VkDescriptorSetLayoutBinding
		{
			uint32_t binding; 
			VkDescriptorType descriptorType; 
			uint32_t descriptorCount; 
			VkShaderStageFlags stageFlags; 
			const(VkSampler)* pImmutableSamplers; 
		} 
		struct VkDescriptorSetLayoutCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DESCRIPTOR_SET_LAYOUT_CREATE_INFO; 
			const(void)* pNext; 
			VkDescriptorSetLayoutCreateFlags flags; 
			uint32_t bindingCount; 
			const(VkDescriptorSetLayoutBinding)* pBindings; 
		} 
		enum VkDescriptorPoolCreateFlagBits
		{ VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001, } 
		alias VkDescriptorPoolCreateFlags = VkFlags; 
		struct VkDescriptorPoolSize
		{
			VkDescriptorType type; 
			uint32_t descriptorCount; 
		} 
		struct VkDescriptorPoolCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DESCRIPTOR_POOL_CREATE_INFO; 
			const(void)* pNext; 
			VkDescriptorPoolCreateFlags flags; 
			uint32_t maxSets; 
			uint32_t poolSizeCount; 
			const(VkDescriptorPoolSize)* pPoolSizes; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkDescriptorPool}); 
		alias VkDescriptorPoolResetFlags = VkFlags; 
		struct VkDescriptorSetAllocateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DESCRIPTOR_SET_ALLOCATE_INFO; 
			const(void)* pNext; 
			VkDescriptorPool descriptorPool; 
			uint32_t descriptorSetCount; 
			const(VkDescriptorSetLayout)* pSetLayouts; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkDescriptorSet}); 
		struct VkDescriptorImageInfo
		{
			VkSampler sampler; 
			VkImageView imageView; 
			VkImageLayout imageLayout; 
		} 
		struct VkDescriptorBufferInfo
		{
			VkBuffer buffer; 
			VkDeviceSize offset; 
			VkDeviceSize range; 
		} 
		struct VkWriteDescriptorSet
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.WRITE_DESCRIPTOR_SET; 
			const(void)* pNext; 
			VkDescriptorSet dstSet; 
			uint32_t dstBinding; 
			uint32_t dstArrayElement; 
			uint32_t descriptorCount; 
			VkDescriptorType descriptorType; 
			const(VkDescriptorImageInfo)* pImageInfo; 
			const(VkDescriptorBufferInfo)* pBufferInfo; 
			const(VkBufferView)* pTexelBufferView; 
		} 
		struct VkCopyDescriptorSet
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.COPY_DESCRIPTOR_SET; 
			const(void)* pNext; 
			VkDescriptorSet srcSet; 
			uint32_t srcBinding; 
			uint32_t srcArrayElement; 
			VkDescriptorSet dstSet; 
			uint32_t dstBinding; 
			uint32_t dstArrayElement; 
			uint32_t descriptorCount; 
		} 
		alias VkFramebufferCreateFlags = VkFlags; 
		struct VkFramebufferCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.FRAMEBUFFER_CREATE_INFO; 
			const(void)* pNext; 
			VkFramebufferCreateFlags flags; 
			VkRenderPass renderPass; 
			uint32_t attachmentCount; 
			const(VkImageView)* pAttachments; 
			uint32_t width; 
			uint32_t height; 
			uint32_t layers; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkFramebuffer}); 
		alias VkRenderPassCreateFlags = VkFlags; 
		enum VkAttachmentDescriptionFlagBits
		{ VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001, } 
		alias VkAttachmentDescriptionFlags = VkFlags; 
		
		alias VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_; 
		enum VK_ATTACHMENT_LOAD_OP_
		{
			LOAD = 0,
			CLEAR = 1,
			DONT_CARE = 2,
		} 
		
		alias VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_; 
		enum VK_ATTACHMENT_STORE_OP_
		{
			STORE = 0,
			DONT_CARE = 1,
		} 
		
		struct VkAttachmentDescription
		{
			VkAttachmentDescriptionFlags flags; 
			VkFormat format; 
			VkSampleCountFlagBits samples; 
			VkAttachmentLoadOp loadOp; 
			VkAttachmentStoreOp storeOp; 
			VkAttachmentLoadOp stencilLoadOp; 
			VkAttachmentStoreOp stencilStoreOp; 
			VkImageLayout initialLayout; 
			VkImageLayout finalLayout; 
		} 
		alias VkSubpassDescriptionFlags = VkFlags; 
		
		alias VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_; 
		enum VK_PIPELINE_BIND_POINT_
		{
			GRAPHICS = 0,
			COMPUTE = 1,
		} 
		
		struct VkAttachmentReference
		{
			uint32_t attachment; 
			VkImageLayout layout; 
		} 
		struct VkSubpassDescription
		{
			VkSubpassDescriptionFlags flags; 
			VkPipelineBindPoint pipelineBindPoint; 
			uint32_t inputAttachmentCount; 
			const(VkAttachmentReference)* pInputAttachments; 
			uint32_t colorAttachmentCount; 
			const(VkAttachmentReference)* pColorAttachments; 
			const(VkAttachmentReference)* pResolveAttachments; 
			const(VkAttachmentReference)* pDepthStencilAttachment; 
			uint32_t preserveAttachmentCount; 
			const(uint32_t)* pPreserveAttachments; 
		} 
		
		alias VkAccessFlagBits = VK_ACCESS_; 
		enum VK_ACCESS_
		{
			INDIRECT_COMMAND_READ_BIT = 0x00000001,
			INDEX_READ_BIT = 0x00000002,
			VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
			UNIFORM_READ_BIT = 0x00000008,
			INPUT_ATTACHMENT_READ_BIT = 0x00000010,
			SHADER_READ_BIT = 0x00000020,
			SHADER_WRITE_BIT = 0x00000040,
			COLOR_ATTACHMENT_READ_BIT = 0x00000080,
			COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
			DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
			DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
			TRANSFER_READ_BIT = 0x00000800,
			TRANSFER_WRITE_BIT = 0x00001000,
			HOST_READ_BIT = 0x00002000,
			HOST_WRITE_BIT = 0x00004000,
			MEMORY_READ_BIT = 0x00008000,
			MEMORY_WRITE_BIT = 0x00010000,
		} 
		alias VkAccessFlags = VkBitFlags!VkAccessFlagBits; 
		
		enum VkDependencyFlagBits
		{ VK_DEPENDENCY_BY_REGION_BIT = 0x00000001, } 
		alias VkDependencyFlags = VkFlags; 
		struct VkSubpassDependency
		{
			uint32_t srcSubpass; 
			uint32_t dstSubpass; 
			VkPipelineStageFlags srcStageMask; 
			VkPipelineStageFlags dstStageMask; 
			VkAccessFlags srcAccessMask; 
			VkAccessFlags dstAccessMask; 
			VkDependencyFlags dependencyFlags; 
		} 
		struct VkRenderPassCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.RENDER_PASS_CREATE_INFO; 
			const(void)* pNext; 
			VkRenderPassCreateFlags flags; 
			uint32_t attachmentCount; 
			const(VkAttachmentDescription)* pAttachments; 
			uint32_t subpassCount; 
			const(VkSubpassDescription)* pSubpasses; 
			uint32_t dependencyCount; 
			const(VkSubpassDependency)* pDependencies; 
		} 
		enum VkCommandPoolCreateFlagBits
		{
			VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,
			VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
		} 
		alias VkCommandPoolCreateFlags = VkFlags; 
		struct VkCommandPoolCreateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.COMMAND_POOL_CREATE_INFO; 
			const(void)* pNext; 
			VkCommandPoolCreateFlags flags; 
			uint32_t queueFamilyIndex; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkCommandPool}); 
		enum VkCommandPoolResetFlagBits
		{ VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001, } 
		alias VkCommandPoolResetFlags = VkFlags; 
		alias VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_; 
		enum VK_COMMAND_BUFFER_LEVEL_
		{
			PRIMARY = 0,
			SECONDARY = 1,
		} 
		struct VkCommandBufferAllocateInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.COMMAND_BUFFER_ALLOCATE_INFO; 
			const(void)* pNext; 
			VkCommandPool commandPool; 
			VkCommandBufferLevel level; 
			uint32_t commandBufferCount; 
		} 
		alias VkCommandBufferUsageFlagBits = VK_COMMAND_BUFFER_USAGE_; 
		enum VK_COMMAND_BUFFER_USAGE_
		{
			ONE_TIME_SUBMIT_BIT = 0x00000001,
			RENDER_PASS_CONTINUE_BIT = 0x00000002,
			SIMULTANEOUS_USE_BIT = 0x00000004,
		} 
		alias VkCommandBufferUsageFlags = VkBitFlags!VkCommandBufferUsageFlagBits; 
		enum VkQueryControlFlagBits
		{ VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001, } 
		alias VkQueryControlFlags = VkFlags; 
		struct VkCommandBufferInheritanceInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.COMMAND_BUFFER_INHERITANCE_INFO; 
			const(void)* pNext; 
			VkRenderPass renderPass; 
			uint32_t subpass; 
			VkFramebuffer framebuffer; 
			VkBool32 occlusionQueryEnable; 
			VkQueryControlFlags queryFlags; 
			VkQueryPipelineStatisticFlags pipelineStatistics; 
		} 
		struct VkCommandBufferBeginInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.COMMAND_BUFFER_BEGIN_INFO; 
			const(void)* pNext; 
			VkCommandBufferUsageFlags flags; 
			const(VkCommandBufferInheritanceInfo)* pInheritanceInfo; 
		} 
		enum VkCommandBufferResetFlagBits
		{ VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001, } 
		alias VkCommandBufferResetFlags = VkFlags; 
		enum VkStencilFaceFlagBits
		{
			VK_STENCIL_FACE_FRONT_BIT = 0x00000001,
			VK_STENCIL_FACE_BACK_BIT = 0x00000002,
			VK_STENCIL_FRONT_AND_BACK = 0x00000003,
		} 
		alias VkStencilFaceFlags = VkFlags; 
		
		alias VkIndexType = VK_INDEX_TYPE_; 
		enum VK_INDEX_TYPE_
		{
			UINT16 = 0,
			UINT32 = 1,
		} 
		
		struct VkBufferCopy
		{
			VkDeviceSize srcOffset; 
			VkDeviceSize dstOffset; 
			VkDeviceSize size; 
		} 
		struct VkImageSubresourceLayers
		{
			VkImageAspectFlags aspectMask; 
			uint32_t mipLevel; 
			uint32_t baseArrayLayer; 
			uint32_t layerCount; 
		} 
		struct VkImageCopy
		{
			VkImageSubresourceLayers srcSubresource; 
			VkOffset3D srcOffset; 
			VkImageSubresourceLayers dstSubresource; 
			VkOffset3D dstOffset; 
			VkExtent3D extent; 
		} 
		struct VkImageBlit
		{
			VkImageSubresourceLayers srcSubresource; 
			VkOffset3D[2] srcOffsets; 
			VkImageSubresourceLayers dstSubresource; 
			VkOffset3D[2] dstOffsets; 
		} 
		struct VkBufferImageCopy
		{
			VkDeviceSize bufferOffset; 
			uint32_t bufferRowLength; 
			uint32_t bufferImageHeight; 
			VkImageSubresourceLayers imageSubresource; 
			VkOffset3D imageOffset; 
			VkExtent3D imageExtent; 
		} 
		union VkClearColorValue
		{
			float[4] float32; 
			int32_t[4] int32; 
			uint32_t[4] uint32; 
		} 
		struct VkClearDepthStencilValue
		{
			float depth; 
			uint32_t stencil; 
		} 
		union VkClearValue
		{
			VkClearColorValue color; 
			VkClearDepthStencilValue depthStencil; 
		} 
		struct VkClearAttachment
		{
			VkImageAspectFlags aspectMask; 
			uint32_t colorAttachment; 
			VkClearValue clearValue; 
		} 
		struct VkClearRect
		{
			VkRect2D rect; 
			uint32_t baseArrayLayer; 
			uint32_t layerCount; 
		} 
		struct VkImageResolve
		{
			VkImageSubresourceLayers srcSubresource; 
			VkOffset3D srcOffset; 
			VkImageSubresourceLayers dstSubresource; 
			VkOffset3D dstOffset; 
			VkExtent3D extent; 
		} 
		struct VkMemoryBarrier
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.MEMORY_BARRIER; 
			const(void)* pNext; 
			VkAccessFlags srcAccessMask; 
			VkAccessFlags dstAccessMask; 
		} 
		struct VkBufferMemoryBarrier
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.BUFFER_MEMORY_BARRIER; 
			const(void)* pNext; 
			VkAccessFlags srcAccessMask; 
			VkAccessFlags dstAccessMask; 
			uint32_t srcQueueFamilyIndex; 
			uint32_t dstQueueFamilyIndex; 
			VkBuffer buffer; 
			VkDeviceSize offset; 
			VkDeviceSize size; 
		} 
		struct VkImageMemoryBarrier
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.IMAGE_MEMORY_BARRIER; 
			const(void)* pNext; 
			VkAccessFlags srcAccessMask; 
			VkAccessFlags dstAccessMask; 
			VkImageLayout oldLayout; 
			VkImageLayout newLayout; 
			uint32_t srcQueueFamilyIndex; 
			uint32_t dstQueueFamilyIndex; 
			VkImage image; 
			VkImageSubresourceRange subresourceRange; 
		} 
		struct VkRenderPassBeginInfo
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.RENDER_PASS_BEGIN_INFO; 
			const(void)* pNext; 
			VkRenderPass renderPass; 
			VkFramebuffer framebuffer; 
			VkRect2D renderArea; 
			uint32_t clearValueCount; 
			const(VkClearValue)* pClearValues; 
		} 
		
		alias VkSubpassContents = VK_SUBPASS_CONTENTS_; 
		enum VK_SUBPASS_CONTENTS_
		{
			INLINE = 0,
			SECONDARY_COMMAND_BUFFERS = 1,
		} 
		
		struct VkDispatchIndirectCommand
		{
			uint32_t x; 
			uint32_t y; 
			uint32_t z; 
		} 
		struct VkDrawIndexedIndirectCommand
		{
			uint32_t indexCount; 
			uint32_t instanceCount; 
			uint32_t firstIndex; 
			int32_t vertexOffset; 
			uint32_t firstInstance; 
		} 
		struct VkDrawIndirectCommand
		{
			uint32_t vertexCount; 
			uint32_t instanceCount; 
			uint32_t firstVertex; 
			uint32_t firstInstance; 
		} 
	}
}version(/+$DIDE_REGION+/all)
{
	version(DVulkan_VK_KHR_surface)
	{
		enum VK_KHR_SURFACE_SPEC_VERSION = 25; 
		enum VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface"; 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkSurfaceKHR}); 
		
		alias VkSurfaceTransformFlagBitsKHR = VK_SURFACE_TRANSFORM_; 
		enum VK_SURFACE_TRANSFORM_
		{
			IDENTITY_BIT_KHR = 0x00000001,
			ROTATE_90_BIT_KHR = 0x00000002,
			ROTATE_180_BIT_KHR = 0x00000004,
			ROTATE_270_BIT_KHR = 0x00000008,
			HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
			HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
			HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
			HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
			INHERIT_BIT_KHR = 0x00000100,
		} 
		alias VkSurfaceTransformFlagsKHR = VkBitFlags!VK_SURFACE_TRANSFORM_; 
		
		alias VkCompositeAlphaFlagBitsKHR = VK_COMPOSITE_ALPHA_; 
		enum VK_COMPOSITE_ALPHA_
		{
			OPAQUE_BIT_KHR = 0x00000001,
			PRE_MULTIPLIED_BIT_KHR = 0x00000002,
			POST_MULTIPLIED_BIT_KHR = 0x00000004,
			INHERIT_BIT_KHR = 0x00000008,
		} 
		alias VkCompositeAlphaFlagsKHR = VkBitFlags!VkCompositeAlphaFlagBitsKHR; 
		
		struct VkSurfaceCapabilitiesKHR
		{
			uint32_t minImageCount; 
			uint32_t maxImageCount; 
			VkExtent2D currentExtent; 
			VkExtent2D minImageExtent; 
			VkExtent2D maxImageExtent; 
			uint32_t maxImageArrayLayers; 
			VkSurfaceTransformFlagsKHR supportedTransforms; 
			VkSurfaceTransformFlagBitsKHR currentTransform; 
			VkCompositeAlphaFlagsKHR supportedCompositeAlpha; 
			VkImageUsageFlags supportedUsageFlags; 
		} 
		
		alias VkColorSpaceKHR = VK_COLOR_SPACE_; 
		enum VK_COLOR_SPACE_
		{SRGB_NONLINEAR_KHR = 0} 
		
		struct VkSurfaceFormatKHR
		{
			VkFormat format; 
			VkColorSpaceKHR colorSpace; 
		} 
		
		alias VkPresentModeKHR = VK_PRESENT_MODE_; 
		enum VK_PRESENT_MODE_
		{
			IMMEDIATE_KHR = 0,
			MAILBOX_KHR = 1,
			FIFO_KHR = 2,
			FIFO_RELAXED_KHR = 3,
		} 
	}
	
	//het
	version(DVulkan_VK_KHR_win32_surface)
	{
		alias VkWin32SurfaceCreateFlagsKHR = VkFlags; 
		
		import core.sys.windows.windef : HINSTANCE, HWND; 
		
		struct VkWin32SurfaceCreateInfoKHR
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.WIN32_SURFACE_CREATE_INFO_KHR; 
			const void* pNext; 
			VkWin32SurfaceCreateFlagsKHR flags; 
			HINSTANCE hinstance; 
			HWND hwnd; 
		} 
	}
	
	version(DVulkan_VK_KHR_swapchain)
	{
		enum VK_KHR_SWAPCHAIN_SPEC_VERSION = 68; 
		enum VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain"; 
		alias VkSwapchainCreateFlagsKHR = VkFlags; 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkSwapchainKHR}); 
		struct VkSwapchainCreateInfoKHR
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.SWAPCHAIN_CREATE_INFO_KHR; 
			const(void)* pNext; 
			VkSwapchainCreateFlagsKHR flags; 
			VkSurfaceKHR surface; 
			uint32_t minImageCount; 
			VkFormat imageFormat; 
			VkColorSpaceKHR imageColorSpace; 
			VkExtent2D imageExtent; 
			uint32_t imageArrayLayers; 
			VkImageUsageFlags imageUsage; 
			VkSharingMode imageSharingMode; 
			uint32_t queueFamilyIndexCount; 
			const(uint32_t)* pQueueFamilyIndices; 
			VkSurfaceTransformFlagBitsKHR preTransform; 
			VkCompositeAlphaFlagBitsKHR compositeAlpha; 
			VkPresentModeKHR presentMode; 
			VkBool32 clipped; 
			VkSwapchainKHR oldSwapchain; 
		} 
		struct VkPresentInfoKHR
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PRESENT_INFO_KHR; 
			const(void)* pNext; 
			uint32_t waitSemaphoreCount; 
			const(VkSemaphore)* pWaitSemaphores; 
			uint32_t swapchainCount; 
			const(VkSwapchainKHR)* pSwapchains; 
			const(uint32_t)* pImageIndices; 
			VkResult* pResults; 
		} 
	}
	version(DVulkan_VK_KHR_display)
	{
		enum VkDisplayPlaneAlphaFlagBitsKHR
		{
			VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
			VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,
			VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,
			VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
		} 
		alias VkDisplayPlaneAlphaFlagsKHR = VkFlags; 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkDisplayKHR}); 
		struct VkDisplayPropertiesKHR
		{
			VkDisplayKHR display; 
			const(char)* displayName; 
			VkExtent2D physicalDimensions; 
			VkExtent2D physicalResolution; 
			VkSurfaceTransformFlagsKHR supportedTransforms; 
			VkBool32 planeReorderPossible; 
			VkBool32 persistentContent; 
		} 
		struct VkDisplayModeParametersKHR
		{
			VkExtent2D visibleRegion; 
			uint32_t refreshRate; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkDisplayModeKHR}); 
		struct VkDisplayModePropertiesKHR
		{
			VkDisplayModeKHR displayMode; 
			VkDisplayModeParametersKHR parameters; 
		} 
		alias VkDisplayModeCreateFlagsKHR = VkFlags; 
		struct VkDisplayModeCreateInfoKHR
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DISPLAY_MODE_CREATE_INFO_KHR; 
			const(void)* pNext; 
			VkDisplayModeCreateFlagsKHR flags; 
			VkDisplayModeParametersKHR parameters; 
		} 
		struct VkDisplayPlaneCapabilitiesKHR
		{
			VkDisplayPlaneAlphaFlagsKHR supportedAlpha; 
			VkOffset2D minSrcPosition; 
			VkOffset2D maxSrcPosition; 
			VkExtent2D minSrcExtent; 
			VkExtent2D maxSrcExtent; 
			VkOffset2D minDstPosition; 
			VkOffset2D maxDstPosition; 
			VkExtent2D minDstExtent; 
			VkExtent2D maxDstExtent; 
		} 
		struct VkDisplayPlanePropertiesKHR
		{
			VkDisplayKHR currentDisplay; 
			uint32_t currentStackIndex; 
		} 
		alias VkDisplaySurfaceCreateFlagsKHR = VkFlags; 
		struct VkDisplaySurfaceCreateInfoKHR
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DISPLAY_SURFACE_CREATE_INFO_KHR; 
			const(void)* pNext; 
			VkDisplaySurfaceCreateFlagsKHR flags; 
			VkDisplayModeKHR displayMode; 
			uint32_t planeIndex; 
			uint32_t planeStackIndex; 
			VkSurfaceTransformFlagBitsKHR transform; 
			float globalAlpha; 
			VkDisplayPlaneAlphaFlagBitsKHR alphaMode; 
			VkExtent2D imageExtent; 
		} 
		enum VK_KHR_DISPLAY_SPEC_VERSION = 21; 
		enum VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display"; 
	}
	version(DVulkan_VK_KHR_display_swapchain)
	{
		struct VkDisplayPresentInfoKHR
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DISPLAY_PRESENT_INFO_KHR; 
			const(void)* pNext; 
			VkRect2D srcRect; 
			VkRect2D dstRect; 
			VkBool32 persistent; 
		} 
		enum VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 9; 
		enum VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain"; 
	}
	version(DVulkan_VK_KHR_sampler_mirror_clamp_to_edge)
	{
		enum VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 1; 
		enum VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge"; 
	}
	version(DVulkan_VK_ANDROID_native_buffer)
	{
		enum VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION = 4; 
		enum VK_ANDROID_NATIVE_BUFFER_NUMBER = 11; 
		enum VK_ANDROID_NATIVE_BUFFER_NAME = "VK_ANDROID_native_buffer"; 
	}
	version(DVulkan_VK_EXT_debug_report)
	{
		enum VkDebugReportObjectTypeEXT
		{
			VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
			VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
			VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
			VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
			VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
			VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
			VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
			VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
			VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
			VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
			VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
			VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
			VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
			VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
			VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
			VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
			VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
			VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
			VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
			VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
			VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
			VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
			VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
			VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
			VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
			VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
			VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
			VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
			VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,
		} 
		enum VkDebugReportErrorEXT
		{
			VK_DEBUG_REPORT_ERROR_NONE_EXT = 0,
			VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = 1,
		} 
		enum VK_EXT_DEBUG_REPORT_SPEC_VERSION = 2; 
		enum VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report"; 
		enum VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_.DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT; 
		enum VkDebugReportFlagBitsEXT
		{
			VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,
			VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,
			VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
			VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,
			VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,
		} 
		alias VkDebugReportFlagsEXT = VkFlags; 
		alias PFN_vkDebugReportCallbackEXT = VkBool32 function(
			VkDebugReportFlagsEXT	                 flags,
			VkDebugReportObjectTypeEXT	                 objectType,
			uint64_t	                 object,
			size_t	                 location,
			int32_t	                 messageCode,
			const char*																	 pLayerPrefix,
			const char*																	 pMessage,
			void*	                 pUserData
		); 
		struct VkDebugReportCallbackCreateInfoEXT
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT; 
			const(void)* pNext; 
			VkDebugReportFlagsEXT flags; 
			PFN_vkDebugReportCallbackEXT pfnCallback; 
			void* pUserData; 
		} 
		mixin(VK_DEFINE_NON_DISPATCHABLE_HANDLE!q{VkDebugReportCallbackEXT}); 
	}
	version(DVulkan_VK_NV_glsl_shader)
	{
		enum VK_NV_GLSL_SHADER_SPEC_VERSION = 1; 
		enum VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader"; 
	}
	version(DVulkan_VK_NV_extension_1)
	{
		enum VK_NV_EXTENSION_1_SPEC_VERSION = 0; 
		enum VK_NV_EXTENSION_1_EXTENSION_NAME = "VK_NV_extension_1"; 
	}
	version(DVulkan_VK_IMG_filter_cubic)
	{
		enum VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1; 
		enum VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic"; 
	}
	version(DVulkan_VK_AMD_extension_1)
	{
		enum VK_AMD_EXTENSION_1_SPEC_VERSION = 0; 
		enum VK_AMD_EXTENSION_1_EXTENSION_NAME = "VK_AMD_extension_1"; 
	}
	version(DVulkan_VK_AMD_extension_2)
	{
		enum VK_AMD_EXTENSION_2_SPEC_VERSION = 0; 
		enum VK_AMD_EXTENSION_2_EXTENSION_NAME = "VK_AMD_extension_2"; 
	}
	version(DVulkan_VK_AMD_rasterization_order)
	{
		enum VkRasterizationOrderAMD
		{
			VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
			VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
		} 
		struct VkPipelineRasterizationStateRasterizationOrderAMD
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD; 
			const(void)* pNext; 
			VkRasterizationOrderAMD rasterizationOrder; 
		} 
		enum VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1; 
		enum VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order"; 
	}
	version(DVulkan_VK_AMD_extension_4)
	{
		enum VK_AMD_EXTENSION_4_SPEC_VERSION = 0; 
		enum VK_AMD_EXTENSION_4_EXTENSION_NAME = "VK_AMD_extension_4"; 
	}
	version(DVulkan_VK_AMD_extension_5)
	{
		enum VK_AMD_EXTENSION_5_SPEC_VERSION = 0; 
		enum VK_AMD_EXTENSION_5_EXTENSION_NAME = "VK_AMD_extension_5"; 
	}
	version(DVulkan_VK_AMD_extension_6)
	{
		enum VK_AMD_EXTENSION_6_SPEC_VERSION = 0; 
		enum VK_AMD_EXTENSION_6_EXTENSION_NAME = "VK_AMD_extension_6"; 
	}
	version(DVulkan_VK_EXT_debug_marker)
	{
		struct VkDebugMarkerObjectNameInfoEXT
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DEBUG_MARKER_OBJECT_NAME_INFO_EXT; 
			const(void)* pNext; 
			VkDebugReportObjectTypeEXT objectType; 
			uint64_t object; 
			const(char)* pObjectName; 
		} 
		struct VkDebugMarkerObjectTagInfoEXT
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DEBUG_MARKER_OBJECT_TAG_INFO_EXT; 
			const(void)* pNext; 
			VkDebugReportObjectTypeEXT objectType; 
			uint64_t object; 
			uint64_t tagName; 
			size_t tagSize; 
			const(void)* pTag; 
		} 
		struct VkDebugMarkerMarkerInfoEXT
		{
			VkStructureType sType = VK_STRUCTURE_TYPE_.DEBUG_MARKER_MARKER_INFO_EXT; 
			const(void)* pNext; 
			const(char)* pMarkerName; 
			float[4] color; 
		} 
		enum VK_EXT_DEBUG_MARKER_SPEC_VERSION = 3; 
		enum VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker"; 
	}
	
}